
Car_Parking_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000309e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  0000309e  00003132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800192  00800192  00003264  2**0
                  ALLOC
  3 .stab         00002b74  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ab  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007283  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007423  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007615  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ada6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bf7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c432  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cda0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 16 	call	0x2c50	; 0x2c50 <main>
      8a:	0c 94 4d 18 	jmp	0x309a	; 0x309a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 17 	jmp	0x2fda	; 0x2fda <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 57       	subi	r30, 0x71	; 113
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL)
     e58:	80 91 92 01 	lds	r24, 0x0192
     e5c:	90 91 93 01 	lds	r25, 0x0193
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 92 01 	lds	r30, 0x0192
     e68:	f0 91 93 01 	lds	r31, 0x0193
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	98 2f       	mov	r25, r24
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	80 81       	ld	r24, Z
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	2f 7b       	andi	r18, 0xBF	; 191
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	00 24       	eor	r0, r0
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	07 94       	ror	r0
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	07 94       	ror	r0
     ef6:	98 2f       	mov	r25, r24
     ef8:	80 2d       	mov	r24, r0
     efa:	82 2b       	or	r24, r18
     efc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <ICU_setCallBack>:


void ICU_setCallBack(void(*a_ptr)(void)){
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <ICU_setCallBack+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	90 93 93 01 	sts	0x0193, r25
     f3c:	80 93 92 01 	sts	0x0192, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType edgeType){
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((edgeType)<<6);
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	2f 7b       	andi	r18, 0xBF	; 191
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 24       	eor	r0, r0
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	07 94       	ror	r0
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	07 94       	ror	r0
     f78:	98 2f       	mov	r25, r24
     f7a:	80 2d       	mov	r24, r0
     f7c:	82 2b       	or	r24, r18
     f7e:	8c 93       	st	X, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void){
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <ICU_clearTimerValue>:

void ICU_clearTimerValue(void){
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	11 82       	std	Z+1, r1	; 0x01
     fac:	10 82       	st	Z, r1
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <ICU_deInit>:

void ICU_deInit(void){
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	10 82       	st	Z, r1
	TCCR1B = 0;
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc8:	ec e4       	ldi	r30, 0x4C	; 76
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	11 82       	std	Z+1, r1	; 0x01
     fce:	10 82       	st	Z, r1
	ICR1 = 0;
     fd0:	e6 e4       	ldi	r30, 0x46	; 70
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL;
     fe6:	10 92 93 01 	sts	0x0193, r1
     fea:	10 92 92 01 	sts	0x0192, r1
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPinDirection>:
 * Inputs:
 *  - port_num : ID of the port (PORTA_ID → PORTD_ID)
 *  - pin_num  : ID of the pin (0 → 7)
 *  - status   : pin_input or pin_output
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, pinDirection status){
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPinDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	85 30       	cpi	r24, 0x05	; 5
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	89 30       	cpi	r24, 0x09	; 9
    1014:	08 f0       	brcs	.+2      	; 0x1018 <GPIO_setupPinDirection+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		/* Invalid port or pin, do nothing */
	}else{
		switch(port_num){
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_setupPinDirection+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <GPIO_setupPinDirection+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <GPIO_setupPinDirection+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <GPIO_setupPinDirection+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <GPIO_setupPinDirection+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <GPIO_setupPinDirection+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <GPIO_setupPinDirection+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if(status == pin_output){
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x88>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	98 c0       	rjmp	.+304    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}else{
				CLEAR_BIT(DDRA, pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0xb4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0xb0>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(status == pin_output){
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0xe0>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}else{
				CLEAR_BIT(DDRB, pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x10c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x108>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(status == pin_output){
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x138>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}else{
				CLEAR_BIT(DDRC, pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x164>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x160>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(status == pin_output){
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x190>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}else{
				CLEAR_BIT(DDRD, pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x1bc>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x1b8>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_writePin>:

/*
 * Description:
 * Write a logic value (HIGH or LOW) on a specific pin.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_writePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
    11dc:	4b 83       	std	Y+3, r20	; 0x03
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	85 30       	cpi	r24, 0x05	; 5
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x1c>
    11e4:	d5 c0       	rjmp	.+426    	; 0x1390 <GPIO_writePin+0x1c6>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	89 30       	cpi	r24, 0x09	; 9
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <GPIO_writePin+0x24>
    11ec:	d1 c0       	rjmp	.+418    	; 0x1390 <GPIO_writePin+0x1c6>
		/* Invalid port or pin, do nothing */
	}else{
		switch(port_num){
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_writePin+0x3a>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <GPIO_writePin+0xc0>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_writePin+0x4e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <GPIO_writePin+0x68>
    1216:	bc c0       	rjmp	.+376    	; 0x1390 <GPIO_writePin+0x1c6>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_writePin+0x5a>
    1222:	5f c0       	rjmp	.+190    	; 0x12e2 <GPIO_writePin+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x66>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <GPIO_writePin+0x170>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == HIGH){
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x8c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x88>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTA, pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0xb0>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == HIGH){
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0xe0>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	6c c0       	rjmp	.+216    	; 0x1390 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTB, pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x10c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x108>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == HIGH){
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x13c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x138>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTC, pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x164>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x160>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == HIGH){
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0x194>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0x190>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <GPIO_writePin+0x1c6>
			}else{
				CLEAR_BIT(PORTD, pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x1bc>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x1b8>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_readPin>:
 *
 * Returns:
 *  - HIGH if the pin is set
 *  - LOW  if the pin is cleared
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	29 97       	sbiw	r28, 0x09	; 9
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	8a 83       	std	Y+2, r24	; 0x02
    13b6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 status = LOW;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	85 30       	cpi	r24, 0x05	; 5
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <GPIO_readPin+0x22>
    13c0:	8c c0       	rjmp	.+280    	; 0x14da <GPIO_readPin+0x13a>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	89 30       	cpi	r24, 0x09	; 9
    13c6:	08 f0       	brcs	.+2      	; 0x13ca <GPIO_readPin+0x2a>
    13c8:	88 c0       	rjmp	.+272    	; 0x14da <GPIO_readPin+0x13a>
		/* Invalid port or pin, return LOW */
	}else{
		switch(port_num){
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	39 87       	std	Y+9, r19	; 0x09
    13d2:	28 87       	std	Y+8, r18	; 0x08
    13d4:	48 85       	ldd	r20, Y+8	; 0x08
    13d6:	59 85       	ldd	r21, Y+9	; 0x09
    13d8:	41 30       	cpi	r20, 0x01	; 1
    13da:	51 05       	cpc	r21, r1
    13dc:	89 f1       	breq	.+98     	; 0x1440 <GPIO_readPin+0xa0>
    13de:	88 85       	ldd	r24, Y+8	; 0x08
    13e0:	99 85       	ldd	r25, Y+9	; 0x09
    13e2:	82 30       	cpi	r24, 0x02	; 2
    13e4:	91 05       	cpc	r25, r1
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <GPIO_readPin+0x54>
    13e8:	28 85       	ldd	r18, Y+8	; 0x08
    13ea:	39 85       	ldd	r19, Y+9	; 0x09
    13ec:	21 15       	cp	r18, r1
    13ee:	31 05       	cpc	r19, r1
    13f0:	69 f0       	breq	.+26     	; 0x140c <GPIO_readPin+0x6c>
    13f2:	73 c0       	rjmp	.+230    	; 0x14da <GPIO_readPin+0x13a>
    13f4:	48 85       	ldd	r20, Y+8	; 0x08
    13f6:	59 85       	ldd	r21, Y+9	; 0x09
    13f8:	42 30       	cpi	r20, 0x02	; 2
    13fa:	51 05       	cpc	r21, r1
    13fc:	d9 f1       	breq	.+118    	; 0x1474 <GPIO_readPin+0xd4>
    13fe:	88 85       	ldd	r24, Y+8	; 0x08
    1400:	99 85       	ldd	r25, Y+9	; 0x09
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <GPIO_readPin+0x6a>
    1408:	4f c0       	rjmp	.+158    	; 0x14a8 <GPIO_readPin+0x108>
    140a:	67 c0       	rjmp	.+206    	; 0x14da <GPIO_readPin+0x13a>
		case PORTA_ID:
			status = (BIT_IS_SET(PINA, pin_num)) ? HIGH : LOW;
    140c:	e9 e3       	ldi	r30, 0x39	; 57
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a9 01       	movw	r20, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_readPin+0x84>
    1420:	55 95       	asr	r21
    1422:	47 95       	ror	r20
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_readPin+0x80>
    1428:	ca 01       	movw	r24, r20
    142a:	81 70       	andi	r24, 0x01	; 1
    142c:	90 70       	andi	r25, 0x00	; 0
    142e:	88 23       	and	r24, r24
    1430:	19 f0       	breq	.+6      	; 0x1438 <GPIO_readPin+0x98>
    1432:	51 e0       	ldi	r21, 0x01	; 1
    1434:	5f 83       	std	Y+7, r21	; 0x07
    1436:	01 c0       	rjmp	.+2      	; 0x143a <GPIO_readPin+0x9a>
    1438:	1f 82       	std	Y+7, r1	; 0x07
    143a:	8f 81       	ldd	r24, Y+7	; 0x07
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	4d c0       	rjmp	.+154    	; 0x14da <GPIO_readPin+0x13a>
			break;
		case PORTB_ID:
			status = (BIT_IS_SET(PINB, pin_num)) ? HIGH : LOW;
    1440:	e6 e3       	ldi	r30, 0x36	; 54
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <GPIO_readPin+0xb8>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <GPIO_readPin+0xb4>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	90 70       	andi	r25, 0x00	; 0
    1462:	88 23       	and	r24, r24
    1464:	19 f0       	breq	.+6      	; 0x146c <GPIO_readPin+0xcc>
    1466:	51 e0       	ldi	r21, 0x01	; 1
    1468:	5e 83       	std	Y+6, r21	; 0x06
    146a:	01 c0       	rjmp	.+2      	; 0x146e <GPIO_readPin+0xce>
    146c:	1e 82       	std	Y+6, r1	; 0x06
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	33 c0       	rjmp	.+102    	; 0x14da <GPIO_readPin+0x13a>
			break;
		case PORTC_ID:
			status = (BIT_IS_SET(PINC, pin_num)) ? HIGH : LOW;
    1474:	e3 e3       	ldi	r30, 0x33	; 51
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_readPin+0xec>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_readPin+0xe8>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	90 70       	andi	r25, 0x00	; 0
    1496:	88 23       	and	r24, r24
    1498:	19 f0       	breq	.+6      	; 0x14a0 <GPIO_readPin+0x100>
    149a:	51 e0       	ldi	r21, 0x01	; 1
    149c:	5d 83       	std	Y+5, r21	; 0x05
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <GPIO_readPin+0x102>
    14a0:	1d 82       	std	Y+5, r1	; 0x05
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	19 c0       	rjmp	.+50     	; 0x14da <GPIO_readPin+0x13a>
			break;
		case PORTD_ID:
			status = (BIT_IS_SET(PIND, pin_num)) ? HIGH : LOW;
    14a8:	e0 e3       	ldi	r30, 0x30	; 48
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a9 01       	movw	r20, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_readPin+0x120>
    14bc:	55 95       	asr	r21
    14be:	47 95       	ror	r20
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_readPin+0x11c>
    14c4:	ca 01       	movw	r24, r20
    14c6:	81 70       	andi	r24, 0x01	; 1
    14c8:	90 70       	andi	r25, 0x00	; 0
    14ca:	88 23       	and	r24, r24
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <GPIO_readPin+0x134>
    14ce:	51 e0       	ldi	r21, 0x01	; 1
    14d0:	5c 83       	std	Y+4, r21	; 0x04
    14d2:	01 c0       	rjmp	.+2      	; 0x14d6 <GPIO_readPin+0x136>
    14d4:	1c 82       	std	Y+4, r1	; 0x04
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return status;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
}
    14dc:	29 96       	adiw	r28, 0x09	; 9
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	de bf       	out	0x3e, r29	; 62
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <GPIO_setupPortDirection>:

/*
 * Description:
 * Setup the direction of an entire port (input or output).
 */
void GPIO_setupPortDirection(uint8 port_num, portDirection status){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_setupPortDirection+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_setupPortDirection+0x8>
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS){
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	90 f5       	brcc	.+100    	; 0x1568 <GPIO_setupPortDirection+0x7a>
		/* Invalid port, do nothing */
	}else{
		switch(port_num){
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3c 83       	std	Y+4, r19	; 0x04
    150c:	2b 83       	std	Y+3, r18	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	d1 f0       	breq	.+52     	; 0x154c <GPIO_setupPortDirection+0x5e>
    1518:	2b 81       	ldd	r18, Y+3	; 0x03
    151a:	3c 81       	ldd	r19, Y+4	; 0x04
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <GPIO_setupPortDirection+0x3e>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <GPIO_setupPortDirection+0x54>
    152a:	1e c0       	rjmp	.+60     	; 0x1568 <GPIO_setupPortDirection+0x7a>
    152c:	2b 81       	ldd	r18, Y+3	; 0x03
    152e:	3c 81       	ldd	r19, Y+4	; 0x04
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	81 f0       	breq	.+32     	; 0x1556 <GPIO_setupPortDirection+0x68>
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <GPIO_setupPortDirection+0x72>
    1540:	13 c0       	rjmp	.+38     	; 0x1568 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = status;
    1542:	ea e3       	ldi	r30, 0x3A	; 58
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
    154a:	0e c0       	rjmp	.+28     	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = status;
    154c:	e7 e3       	ldi	r30, 0x37	; 55
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	80 83       	st	Z, r24
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = status;
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	80 83       	st	Z, r24
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = status;
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	80 83       	st	Z, r24
			break;
		}
	}
}
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <GPIO_writePort>:

/*
 * Description:
 * Write a value (0x00 → 0xFF) on an entire port.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_writePort+0x6>
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_writePort+0x8>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS){
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	85 30       	cpi	r24, 0x05	; 5
    158a:	90 f5       	brcc	.+100    	; 0x15f0 <GPIO_writePort+0x7a>
		/* Invalid port, do nothing */
	}else{
		switch(port_num){
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	3c 83       	std	Y+4, r19	; 0x04
    1594:	2b 83       	std	Y+3, r18	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <GPIO_writePort+0x5e>
    15a0:	2b 81       	ldd	r18, Y+3	; 0x03
    15a2:	3c 81       	ldd	r19, Y+4	; 0x04
    15a4:	22 30       	cpi	r18, 0x02	; 2
    15a6:	31 05       	cpc	r19, r1
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <GPIO_writePort+0x3e>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	61 f0       	breq	.+24     	; 0x15ca <GPIO_writePort+0x54>
    15b2:	1e c0       	rjmp	.+60     	; 0x15f0 <GPIO_writePort+0x7a>
    15b4:	2b 81       	ldd	r18, Y+3	; 0x03
    15b6:	3c 81       	ldd	r19, Y+4	; 0x04
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	81 f0       	breq	.+32     	; 0x15de <GPIO_writePort+0x68>
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	91 05       	cpc	r25, r1
    15c6:	81 f0       	breq	.+32     	; 0x15e8 <GPIO_writePort+0x72>
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    15ca:	eb e3       	ldi	r30, 0x3B	; 59
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	80 83       	st	Z, r24
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15d4:	e8 e3       	ldi	r30, 0x38	; 56
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	80 83       	st	Z, r24
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	80 83       	st	Z, r24
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15e8:	e2 e3       	ldi	r30, 0x32	; 50
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_readPort>:
 * Read the current value of an entire port (8 bits).
 *
 * Returns:
 *  - Value of the port (0x00 → 0xFF).
 */
uint8 GPIO_readPort(uint8 port_num){
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_readPort+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_readPort+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status = 0x00;
    160c:	19 82       	std	Y+1, r1	; 0x01
	if(port_num > NUM_OF_PORTS){
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	85 30       	cpi	r24, 0x05	; 5
    1612:	90 f5       	brcc	.+100    	; 0x1678 <GPIO_readPort+0x7a>
		/* Invalid port, return 0x00 */
	}else{
		switch(port_num){
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3c 83       	std	Y+4, r19	; 0x04
    161c:	2b 83       	std	Y+3, r18	; 0x03
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	d1 f0       	breq	.+52     	; 0x165c <GPIO_readPort+0x5e>
    1628:	2b 81       	ldd	r18, Y+3	; 0x03
    162a:	3c 81       	ldd	r19, Y+4	; 0x04
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	2c f4       	brge	.+10     	; 0x163c <GPIO_readPort+0x3e>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	61 f0       	breq	.+24     	; 0x1652 <GPIO_readPort+0x54>
    163a:	1e c0       	rjmp	.+60     	; 0x1678 <GPIO_readPort+0x7a>
    163c:	2b 81       	ldd	r18, Y+3	; 0x03
    163e:	3c 81       	ldd	r19, Y+4	; 0x04
    1640:	22 30       	cpi	r18, 0x02	; 2
    1642:	31 05       	cpc	r19, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <GPIO_readPort+0x68>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	91 05       	cpc	r25, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_readPort+0x72>
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <GPIO_readPort+0x7a>
		case PORTA_ID:
			status = PINA;
    1652:	e9 e3       	ldi	r30, 0x39	; 57
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	0e c0       	rjmp	.+28     	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			status = PINB;
    165c:	e6 e3       	ldi	r30, 0x36	; 54
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	89 83       	std	Y+1, r24	; 0x01
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			status = PINC;
    1666:	e3 e3       	ldi	r30, 0x33	; 51
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			status = PIND;
    1670:	e0 e3       	ldi	r30, 0x30	; 48
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return status;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <Ultrasonic_edgeProcessing>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Ultrasonic_edgeProcessing(void) {
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	Counter++;
    1690:	80 91 94 01 	lds	r24, 0x0194
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	80 93 94 01 	sts	0x0194, r24
	if (Counter == 1) {
    169a:	80 91 94 01 	lds	r24, 0x0194
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	31 f4       	brne	.+12     	; 0x16ae <Ultrasonic_edgeProcessing+0x26>
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    16a2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <Ultrasonic_edgeProcessing+0x44>
	} else if (Counter == 2) {
    16ae:	80 91 94 01 	lds	r24, 0x0194
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	59 f4       	brne	.+22     	; 0x16cc <Ultrasonic_edgeProcessing+0x44>
		/* Store the High time value */
		T1 = ICU_getInputCaptureValue();
    16b6:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_getInputCaptureValue>
    16ba:	90 93 96 01 	sts	0x0196, r25
    16be:	80 93 95 01 	sts	0x0195, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
		Counter = 0;
    16c8:	10 92 94 01 	sts	0x0194, r1
	}
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void) {
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	68 97       	sbiw	r28, 0x18	; 24
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(Ultrasonic_Trigger_PORT_ID, Ultrasonic_Trigger_PIN_ID, HIGH);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	67 e0       	ldi	r22, 0x07	; 7
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e2       	ldi	r26, 0x20	; 32
    16f6:	b1 e4       	ldi	r27, 0x41	; 65
    16f8:	8d 8b       	std	Y+21, r24	; 0x15
    16fa:	9e 8b       	std	Y+22, r25	; 0x16
    16fc:	af 8b       	std	Y+23, r26	; 0x17
    16fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1700:	6d 89       	ldd	r22, Y+21	; 0x15
    1702:	7e 89       	ldd	r23, Y+22	; 0x16
    1704:	8f 89       	ldd	r24, Y+23	; 0x17
    1706:	98 8d       	ldd	r25, Y+24	; 0x18
    1708:	2b ea       	ldi	r18, 0xAB	; 171
    170a:	3a ea       	ldi	r19, 0xAA	; 170
    170c:	4a ea       	ldi	r20, 0xAA	; 170
    170e:	50 e4       	ldi	r21, 0x40	; 64
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	89 8b       	std	Y+17, r24	; 0x11
    171a:	9a 8b       	std	Y+18, r25	; 0x12
    171c:	ab 8b       	std	Y+19, r26	; 0x13
    171e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1720:	69 89       	ldd	r22, Y+17	; 0x11
    1722:	7a 89       	ldd	r23, Y+18	; 0x12
    1724:	8b 89       	ldd	r24, Y+19	; 0x13
    1726:	9c 89       	ldd	r25, Y+20	; 0x14
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	1c f4       	brge	.+6      	; 0x173e <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	88 8b       	std	Y+16, r24	; 0x10
    173c:	91 c0       	rjmp	.+290    	; 0x1860 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    173e:	69 89       	ldd	r22, Y+17	; 0x11
    1740:	7a 89       	ldd	r23, Y+18	; 0x12
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4f e7       	ldi	r20, 0x7F	; 127
    174c:	53 e4       	ldi	r21, 0x43	; 67
    174e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1752:	18 16       	cp	r1, r24
    1754:	0c f0       	brlt	.+2      	; 0x1758 <Ultrasonic_Trigger+0x86>
    1756:	7b c0       	rjmp	.+246    	; 0x184e <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1758:	6d 89       	ldd	r22, Y+21	; 0x15
    175a:	7e 89       	ldd	r23, Y+22	; 0x16
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	4a e7       	ldi	r20, 0x7A	; 122
    1766:	54 e4       	ldi	r21, 0x44	; 68
    1768:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	8c 87       	std	Y+12, r24	; 0x0c
    1772:	9d 87       	std	Y+13, r25	; 0x0d
    1774:	ae 87       	std	Y+14, r26	; 0x0e
    1776:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6c 85       	ldd	r22, Y+12	; 0x0c
    177a:	7d 85       	ldd	r23, Y+13	; 0x0d
    177c:	8e 85       	ldd	r24, Y+14	; 0x0e
    177e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a e7       	ldi	r20, 0x7A	; 122
    1786:	55 e4       	ldi	r21, 0x45	; 69
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	88 87       	std	Y+8, r24	; 0x08
    1792:	99 87       	std	Y+9, r25	; 0x09
    1794:	aa 87       	std	Y+10, r26	; 0x0a
    1796:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1798:	68 85       	ldd	r22, Y+8	; 0x08
    179a:	79 85       	ldd	r23, Y+9	; 0x09
    179c:	8a 85       	ldd	r24, Y+10	; 0x0a
    179e:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9f 83       	std	Y+7, r25	; 0x07
    17b6:	8e 83       	std	Y+6, r24	; 0x06
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    17ba:	68 85       	ldd	r22, Y+8	; 0x08
    17bc:	79 85       	ldd	r23, Y+9	; 0x09
    17be:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    17d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    17d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <Ultrasonic_Trigger+0x148>
    17fc:	80 e9       	ldi	r24, 0x90	; 144
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	9d 83       	std	Y+5, r25	; 0x05
    1802:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <Ultrasonic_Trigger+0x136>
    180c:	9d 83       	std	Y+5, r25	; 0x05
    180e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8e 81       	ldd	r24, Y+6	; 0x06
    1812:	9f 81       	ldd	r25, Y+7	; 0x07
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9f 83       	std	Y+7, r25	; 0x07
    1818:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <Ultrasonic_Trigger+0x12a>
    1822:	24 c0       	rjmp	.+72     	; 0x186c <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	68 85       	ldd	r22, Y+8	; 0x08
    1826:	79 85       	ldd	r23, Y+9	; 0x09
    1828:	8a 85       	ldd	r24, Y+10	; 0x0a
    182a:	9b 85       	ldd	r25, Y+11	; 0x0b
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9f 83       	std	Y+7, r25	; 0x07
    1836:	8e 83       	std	Y+6, r24	; 0x06
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	9b 83       	std	Y+3, r25	; 0x03
    183e:	8a 83       	std	Y+2, r24	; 0x02
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <Ultrasonic_Trigger+0x172>
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	0f c0       	rjmp	.+30     	; 0x186c <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    184e:	69 89       	ldd	r22, Y+17	; 0x11
    1850:	7a 89       	ldd	r23, Y+18	; 0x12
    1852:	8b 89       	ldd	r24, Y+19	; 0x13
    1854:	9c 89       	ldd	r25, Y+20	; 0x14
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	88 8b       	std	Y+16, r24	; 0x10
    1860:	88 89       	ldd	r24, Y+16	; 0x10
    1862:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	8a 95       	dec	r24
    1868:	f1 f7       	brne	.-4      	; 0x1866 <Ultrasonic_Trigger+0x194>
    186a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(TRIGGER_DELAY);
	GPIO_writePin(Ultrasonic_Trigger_PORT_ID, Ultrasonic_Trigger_PIN_ID, LOW);
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	67 e0       	ldi	r22, 0x07	; 7
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    1876:	68 96       	adiw	r28, 0x18	; 24
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void) {
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <Ultrasonic_readDistance+0x6>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	uint16 distance;
	Ultrasonic_Trigger();
    1892:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Ultrasonic_Trigger>
	distance = (uint16)(T1 / 117.6);
    1896:	80 91 95 01 	lds	r24, 0x0195
    189a:	90 91 96 01 	lds	r25, 0x0196
    189e:	cc 01       	movw	r24, r24
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	bc 01       	movw	r22, r24
    18a6:	cd 01       	movw	r24, r26
    18a8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	23 e3       	ldi	r18, 0x33	; 51
    18b6:	33 e3       	ldi	r19, 0x33	; 51
    18b8:	4b ee       	ldi	r20, 0xEB	; 235
    18ba:	52 e4       	ldi	r21, 0x42	; 66
    18bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
	return distance;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <Ultrasonic_init>:

void Ultrasonic_init(void) {
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	ICU_init(&configurations);
    18ea:	8f e8       	ldi	r24, 0x8F	; 143
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    18f2:	84 e4       	ldi	r24, 0x44	; 68
    18f4:	9b e0       	ldi	r25, 0x0B	; 11
    18f6:	0e 94 93 07 	call	0xf26	; 0xf26 <ICU_setCallBack>
	GPIO_setupPinDirection(Ultrasonic_Trigger_PORT_ID, Ultrasonic_Trigger_PIN_ID, pin_output);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	67 e0       	ldi	r22, 0x07	; 7
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <LEDS_init>:
 * Description:
 * Initialize all LEDs:
 * - Set Red, Green, and Blue pins as output.
 * - Turn OFF all LEDs at the beginning.
 */
void LEDS_init(void){
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(RED_LED_PORT, RED_LED_PIN, pin_output);
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(GREEN_LED_PORT, GREEN_LED_PIN, pin_output);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(BLUE_LED_PORT, BLUE_LED_PIN, pin_output);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	GPIO_writePin(RED_LED_PORT, RED_LED_PIN, OFF);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, OFF);
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, OFF);
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	08 95       	ret

00001954 <LED_on>:
 * Turn ON a specific LED (Red, Green, or Blue).
 *
 * Input:
 * - id: LED_ID (RED_LED, GREEN_LED, BLUE_LED)
 */
void LED_on(LED_ID id){
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	00 d0       	rcall	.+0      	; 0x195a <LED_on+0x6>
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	89 83       	std	Y+1, r24	; 0x01
	switch(id){
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3b 83       	std	Y+3, r19	; 0x03
    196a:	2a 83       	std	Y+2, r18	; 0x02
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	79 f0       	breq	.+30     	; 0x1994 <LED_on+0x40>
    1976:	2a 81       	ldd	r18, Y+2	; 0x02
    1978:	3b 81       	ldd	r19, Y+3	; 0x03
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	81 f0       	breq	.+32     	; 0x19a0 <LED_on+0x4c>
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	89 f4       	brne	.+34     	; 0x19aa <LED_on+0x56>
	case RED_LED:
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, ON);
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1992:	0b c0       	rjmp	.+22     	; 0x19aa <LED_on+0x56>
		break;
	case GREEN_LED:
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, ON);
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <LED_on+0x56>
		break;
	case BLUE_LED:
		GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, ON);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
		break;
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LED_off>:
 * Turn OFF a specific LED (Red, Green, or Blue).
 *
 * Input:
 * - id: LED_ID (RED_LED, GREEN_LED, BLUE_LED)
 */
void LED_off(LED_ID id){
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <LED_off+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	89 83       	std	Y+1, r24	; 0x01
	switch(id){
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	3b 83       	std	Y+3, r19	; 0x03
    19cc:	2a 83       	std	Y+2, r18	; 0x02
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	91 05       	cpc	r25, r1
    19d6:	79 f0       	breq	.+30     	; 0x19f6 <LED_off+0x40>
    19d8:	2a 81       	ldd	r18, Y+2	; 0x02
    19da:	3b 81       	ldd	r19, Y+3	; 0x03
    19dc:	22 30       	cpi	r18, 0x02	; 2
    19de:	31 05       	cpc	r19, r1
    19e0:	81 f0       	breq	.+32     	; 0x1a02 <LED_off+0x4c>
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	9b 81       	ldd	r25, Y+3	; 0x03
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	89 f4       	brne	.+34     	; 0x1a0c <LED_off+0x56>
	case RED_LED:
		GPIO_writePin(RED_LED_PORT, RED_LED_PIN, OFF);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    19f4:	0b c0       	rjmp	.+22     	; 0x1a0c <LED_off+0x56>
		break;
	case GREEN_LED:
		GPIO_writePin(GREEN_LED_PORT, GREEN_LED_PIN, OFF);
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	61 e0       	ldi	r22, 0x01	; 1
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <LED_off+0x56>
		break;
	case BLUE_LED:
		GPIO_writePin(BLUE_LED_PORT, BLUE_LED_PIN, OFF);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
		break;
	}
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the direction of RS, E, and Data bus pins.
 * 2. Send initialization commands to configure LCD.
 */
void LCD_init(void){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	2e 97       	sbiw	r28, 0x0e	; 14
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,pin_output);   // RS pin as output
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT,LCD_E_PIN,pin_output);     // E pin as output
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	62 e0       	ldi	r22, 0x02	; 2
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	a0 ea       	ldi	r26, 0xA0	; 160
    1a46:	b1 e4       	ldi	r27, 0x41	; 65
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
    1a4a:	9c 87       	std	Y+12, r25	; 0x0c
    1a4c:	ad 87       	std	Y+13, r26	; 0x0d
    1a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	4a e7       	ldi	r20, 0x7A	; 122
    1a5e:	55 e4       	ldi	r21, 0x45	; 69
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8f 83       	std	Y+7, r24	; 0x07
    1a6a:	98 87       	std	Y+8, r25	; 0x08
    1a6c:	a9 87       	std	Y+9, r26	; 0x09
    1a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <LCD_init+0x7a>
		__ticks = 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a92:	6f 81       	ldd	r22, Y+7	; 0x07
    1a94:	78 85       	ldd	r23, Y+8	; 0x08
    1a96:	89 85       	ldd	r24, Y+9	; 0x09
    1a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	3f ef       	ldi	r19, 0xFF	; 255
    1a9e:	4f e7       	ldi	r20, 0x7F	; 127
    1aa0:	57 e4       	ldi	r21, 0x47	; 71
    1aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa6:	18 16       	cp	r1, r24
    1aa8:	4c f5       	brge	.+82     	; 0x1afc <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e2       	ldi	r20, 0x20	; 32
    1ab8:	51 e4       	ldi	r21, 0x41	; 65
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <LCD_init+0xda>
    1ad4:	80 e9       	ldi	r24, 0x90	; 144
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	9c 83       	std	Y+4, r25	; 0x04
    1ada:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_init+0xc8>
    1ae4:	9c 83       	std	Y+4, r25	; 0x04
    1ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	9e 81       	ldd	r25, Y+6	; 0x06
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	69 f7       	brne	.-38     	; 0x1ad4 <LCD_init+0xbc>
    1afa:	14 c0       	rjmp	.+40     	; 0x1b24 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9e 83       	std	Y+6, r25	; 0x06
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	8d 81       	ldd	r24, Y+5	; 0x05
    1b12:	9e 81       	ldd	r25, Y+6	; 0x06
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <LCD_init+0x104>
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20); 												 // Wait for LCD power up
#if(LCD_DATA_BITS_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_BUS,LCD_DB4_PIN_ID,pin_output);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	63 e0       	ldi	r22, 0x03	; 3
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS,LCD_DB5_PIN_ID,pin_output);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	64 e0       	ldi	r22, 0x04	; 4
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS,LCD_DB6_PIN_ID,pin_output);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	65 e0       	ldi	r22, 0x05	; 5
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_BUS,LCD_DB7_PIN_ID,pin_output);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	66 e0       	ldi	r22, 0x06	; 6
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommond(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b4c:	83 e3       	ldi	r24, 0x33	; 51
    1b4e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
	LCD_sendCommond(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b52:	82 e3       	ldi	r24, 0x32	; 50
    1b54:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommond(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b58:	88 e2       	ldi	r24, 0x28	; 40
    1b5a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
#else
	GPIO_setupPortDirection(LCD_DATA_BUS,port_output);           // Data bus as output

	LCD_sendCommond(LCD_TWO_LINES_EIGHT_BITS_MODE);              // Function set: 2 lines, 8-bit mode
#endif
	LCD_sendCommond(LCD_CURSOR_OFF);                             // Turn cursor off
    1b5e:	8c e0       	ldi	r24, 0x0C	; 12
    1b60:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
	LCD_sendCommond(LCD_CLEAR_SCREEN);                           // Clear display
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
}
    1b6a:	2e 96       	adiw	r28, 0x0e	; 14
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <LCD_sendCommond>:

/*
 * Description :
 * Send a command to the LCD
 */
void LCD_sendCommond(uint8 commond){
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	c5 55       	subi	r28, 0x55	; 85
    1b8a:	d0 40       	sbci	r29, 0x00	; 0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	fe 01       	movw	r30, r28
    1b98:	eb 5a       	subi	r30, 0xAB	; 171
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOW);    // RS=0 for command mode
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ef 5a       	subi	r30, 0xAF	; 175
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e8       	ldi	r26, 0x80	; 128
    1bb4:	bf e3       	ldi	r27, 0x3F	; 63
    1bb6:	80 83       	st	Z, r24
    1bb8:	91 83       	std	Z+1, r25	; 0x01
    1bba:	a2 83       	std	Z+2, r26	; 0x02
    1bbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbe:	8e 01       	movw	r16, r28
    1bc0:	03 5b       	subi	r16, 0xB3	; 179
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ef 5a       	subi	r30, 0xAF	; 175
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	55 e4       	ldi	r21, 0x45	; 69
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	f8 01       	movw	r30, r16
    1be4:	80 83       	st	Z, r24
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	a2 83       	std	Z+2, r26	; 0x02
    1bea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bec:	fe 01       	movw	r30, r28
    1bee:	e3 5b       	subi	r30, 0xB3	; 179
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	60 81       	ld	r22, Z
    1bf4:	71 81       	ldd	r23, Z+1	; 0x01
    1bf6:	82 81       	ldd	r24, Z+2	; 0x02
    1bf8:	93 81       	ldd	r25, Z+3	; 0x03
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e8       	ldi	r20, 0x80	; 128
    1c00:	5f e3       	ldi	r21, 0x3F	; 63
    1c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c06:	88 23       	and	r24, r24
    1c08:	44 f4       	brge	.+16     	; 0x1c1a <LCD_sendCommond+0x9e>
		__ticks = 1;
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e5 5b       	subi	r30, 0xB5	; 181
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
    1c18:	64 c0       	rjmp	.+200    	; 0x1ce2 <LCD_sendCommond+0x166>
	else if (__tmp > 65535)
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e3 5b       	subi	r30, 0xB3	; 179
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	0c f0       	brlt	.+2      	; 0x1c3a <LCD_sendCommond+0xbe>
    1c38:	43 c0       	rjmp	.+134    	; 0x1cc0 <LCD_sendCommond+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ef 5a       	subi	r30, 0xAF	; 175
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8e 01       	movw	r16, r28
    1c5a:	05 5b       	subi	r16, 0xB5	; 181
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
    1c70:	1f c0       	rjmp	.+62     	; 0x1cb0 <LCD_sendCommond+0x134>
    1c72:	fe 01       	movw	r30, r28
    1c74:	e7 5b       	subi	r30, 0xB7	; 183
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e9       	ldi	r24, 0x90	; 144
    1c7a:	91 e0       	ldi	r25, 0x01	; 1
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	fe 01       	movw	r30, r28
    1c82:	e7 5b       	subi	r30, 0xB7	; 183
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 81       	ld	r24, Z
    1c88:	91 81       	ldd	r25, Z+1	; 0x01
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_sendCommond+0x10e>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5b       	subi	r30, 0xB7	; 183
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	de 01       	movw	r26, r28
    1c9a:	a5 5b       	subi	r26, 0xB5	; 181
    1c9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e5 5b       	subi	r30, 0xB5	; 181
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	9c 93       	st	X, r25
    1cae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e5 5b       	subi	r30, 0xB5	; 181
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	d1 f6       	brne	.-76     	; 0x1c72 <LCD_sendCommond+0xf6>
    1cbe:	27 c0       	rjmp	.+78     	; 0x1d0e <LCD_sendCommond+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	8e 01       	movw	r16, r28
    1cc2:	05 5b       	subi	r16, 0xB5	; 181
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e3 5b       	subi	r30, 0xB3	; 179
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	60 81       	ld	r22, Z
    1cce:	71 81       	ldd	r23, Z+1	; 0x01
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	de 01       	movw	r26, r28
    1ce4:	a9 5b       	subi	r26, 0xB9	; 185
    1ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e5 5b       	subi	r30, 0xB5	; 181
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	8d 93       	st	X+, r24
    1cf4:	9c 93       	st	X, r25
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e9 5b       	subi	r30, 0xB9	; 185
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <LCD_sendCommond+0x184>
    1d04:	fe 01       	movw	r30, r28
    1d06:	e9 5b       	subi	r30, 0xB9	; 185
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	91 83       	std	Z+1, r25	; 0x01
    1d0c:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,HIGH);     // Enable = 1
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	62 e0       	ldi	r22, 0x02	; 2
    1d12:	41 e0       	ldi	r20, 0x01	; 1
    1d14:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ed 5b       	subi	r30, 0xBD	; 189
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e8       	ldi	r26, 0x80	; 128
    1d24:	bf e3       	ldi	r27, 0x3F	; 63
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2e:	8e 01       	movw	r16, r28
    1d30:	01 5c       	subi	r16, 0xC1	; 193
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 5b       	subi	r30, 0xBD	; 189
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	4a e7       	ldi	r20, 0x7A	; 122
    1d48:	55 e4       	ldi	r21, 0x45	; 69
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	f8 01       	movw	r30, r16
    1d54:	80 83       	st	Z, r24
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	a2 83       	std	Z+2, r26	; 0x02
    1d5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ff 96       	adiw	r30, 0x3f	; 63
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <LCD_sendCommond+0x206>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e af       	std	Y+62, r25	; 0x3e
    1d7e:	8d af       	std	Y+61, r24	; 0x3d
    1d80:	46 c0       	rjmp	.+140    	; 0x1e0e <LCD_sendCommond+0x292>
	else if (__tmp > 65535)
    1d82:	fe 01       	movw	r30, r28
    1d84:	ff 96       	adiw	r30, 0x3f	; 63
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	64 f5       	brge	.+88     	; 0x1df6 <LCD_sendCommond+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ed 5b       	subi	r30, 0xBD	; 189
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e af       	std	Y+62, r25	; 0x3e
    1dca:	8d af       	std	Y+61, r24	; 0x3d
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_sendCommond+0x270>
    1dce:	80 e9       	ldi	r24, 0x90	; 144
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	9c af       	std	Y+60, r25	; 0x3c
    1dd4:	8b af       	std	Y+59, r24	; 0x3b
    1dd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1dd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_sendCommond+0x25e>
    1dde:	9c af       	std	Y+60, r25	; 0x3c
    1de0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1de4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9e af       	std	Y+62, r25	; 0x3e
    1dea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_sendCommond+0x252>
    1df4:	16 c0       	rjmp	.+44     	; 0x1e22 <LCD_sendCommond+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	fe 01       	movw	r30, r28
    1df8:	ff 96       	adiw	r30, 0x3f	; 63
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e af       	std	Y+62, r25	; 0x3e
    1e0c:	8d af       	std	Y+61, r24	; 0x3d
    1e0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e12:	9a af       	std	Y+58, r25	; 0x3a
    1e14:	89 af       	std	Y+57, r24	; 0x39
    1e16:	89 ad       	ldd	r24, Y+57	; 0x39
    1e18:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_sendCommond+0x29e>
    1e1e:	9a af       	std	Y+58, r25	; 0x3a
    1e20:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_BUS,LCD_DB4_PIN_ID,GET_BIT(commond,4));
    1e22:	fe 01       	movw	r30, r28
    1e24:	eb 5a       	subi	r30, 0xAB	; 171
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	80 71       	andi	r24, 0x10	; 16
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	95 95       	asr	r25
    1e34:	87 95       	ror	r24
    1e36:	95 95       	asr	r25
    1e38:	87 95       	ror	r24
    1e3a:	95 95       	asr	r25
    1e3c:	87 95       	ror	r24
    1e3e:	95 95       	asr	r25
    1e40:	87 95       	ror	r24
    1e42:	98 2f       	mov	r25, r24
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	63 e0       	ldi	r22, 0x03	; 3
    1e48:	49 2f       	mov	r20, r25
    1e4a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB5_PIN_ID,GET_BIT(commond,5));
    1e4e:	fe 01       	movw	r30, r28
    1e50:	eb 5a       	subi	r30, 0xAB	; 171
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	80 72       	andi	r24, 0x20	; 32
    1e5c:	90 70       	andi	r25, 0x00	; 0
    1e5e:	95 95       	asr	r25
    1e60:	87 95       	ror	r24
    1e62:	95 95       	asr	r25
    1e64:	87 95       	ror	r24
    1e66:	95 95       	asr	r25
    1e68:	87 95       	ror	r24
    1e6a:	95 95       	asr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	95 95       	asr	r25
    1e70:	87 95       	ror	r24
    1e72:	98 2f       	mov	r25, r24
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	64 e0       	ldi	r22, 0x04	; 4
    1e78:	49 2f       	mov	r20, r25
    1e7a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB6_PIN_ID,GET_BIT(commond,6));
    1e7e:	fe 01       	movw	r30, r28
    1e80:	eb 5a       	subi	r30, 0xAB	; 171
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	80 74       	andi	r24, 0x40	; 64
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	08 2e       	mov	r0, r24
    1e90:	89 2f       	mov	r24, r25
    1e92:	00 0c       	add	r0, r0
    1e94:	88 1f       	adc	r24, r24
    1e96:	99 0b       	sbc	r25, r25
    1e98:	00 0c       	add	r0, r0
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	65 e0       	ldi	r22, 0x05	; 5
    1ea4:	49 2f       	mov	r20, r25
    1ea6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB7_PIN_ID,GET_BIT(commond,7));
    1eaa:	fe 01       	movw	r30, r28
    1eac:	eb 5a       	subi	r30, 0xAB	; 171
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	98 2f       	mov	r25, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	99 27       	eor	r25, r25
    1eb8:	99 1f       	adc	r25, r25
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	66 e0       	ldi	r22, 0x06	; 6
    1ebe:	49 2f       	mov	r20, r25
    1ec0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	bf e3       	ldi	r27, 0x3F	; 63
    1ecc:	8d ab       	std	Y+53, r24	; 0x35
    1ece:	9e ab       	std	Y+54, r25	; 0x36
    1ed0:	af ab       	std	Y+55, r26	; 0x37
    1ed2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a e7       	ldi	r20, 0x7A	; 122
    1ee2:	55 e4       	ldi	r21, 0x45	; 69
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 ab       	std	Y+49, r24	; 0x31
    1eee:	9a ab       	std	Y+50, r25	; 0x32
    1ef0:	ab ab       	std	Y+51, r26	; 0x33
    1ef2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef8:	8b a9       	ldd	r24, Y+51	; 0x33
    1efa:	9c a9       	ldd	r25, Y+52	; 0x34
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <LCD_sendCommond+0x39a>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <LCD_sendCommond+0x418>
	else if (__tmp > 65535)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <LCD_sendCommond+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_sendCommond+0x3fa>
    1f58:	80 e9       	ldi	r24, 0x90	; 144
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
    1f60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_sendCommond+0x3e8>
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_sendCommond+0x3dc>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <LCD_sendCommond+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
    1f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_sendCommond+0x424>
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	8f a3       	std	Y+39, r24	; 0x27
    1fbc:	98 a7       	std	Y+40, r25	; 0x28
    1fbe:	a9 a7       	std	Y+41, r26	; 0x29
    1fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	55 e4       	ldi	r21, 0x45	; 69
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8b a3       	std	Y+35, r24	; 0x23
    1fdc:	9c a3       	std	Y+36, r25	; 0x24
    1fde:	ad a3       	std	Y+37, r26	; 0x25
    1fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_sendCommond+0x488>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_sendCommond+0x506>
	else if (__tmp > 65535)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_sendCommond+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_sendCommond+0x4e8>
    2046:	80 e9       	ldi	r24, 0x90	; 144
    2048:	91 e0       	ldi	r25, 0x01	; 1
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	98 a1       	ldd	r25, Y+32	; 0x20
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_sendCommond+0x4d6>
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_sendCommond+0x4ca>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_sendCommond+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommond+0x512>
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,HIGH);      // Enable = 1 (Latch data)
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	62 e0       	ldi	r22, 0x02	; 2
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>

	GPIO_writePin(LCD_DATA_BUS,LCD_DB4_PIN_ID,GET_BIT(commond,0));
    20a0:	fe 01       	movw	r30, r28
    20a2:	eb 5a       	subi	r30, 0xAB	; 171
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	98 2f       	mov	r25, r24
    20aa:	91 70       	andi	r25, 0x01	; 1
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	63 e0       	ldi	r22, 0x03	; 3
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB5_PIN_ID,GET_BIT(commond,1));
    20b6:	fe 01       	movw	r30, r28
    20b8:	eb 5a       	subi	r30, 0xAB	; 171
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	82 70       	andi	r24, 0x02	; 2
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	95 95       	asr	r25
    20c8:	87 95       	ror	r24
    20ca:	98 2f       	mov	r25, r24
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	64 e0       	ldi	r22, 0x04	; 4
    20d0:	49 2f       	mov	r20, r25
    20d2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB6_PIN_ID,GET_BIT(commond,2));
    20d6:	fe 01       	movw	r30, r28
    20d8:	eb 5a       	subi	r30, 0xAB	; 171
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	84 70       	andi	r24, 0x04	; 4
    20e4:	90 70       	andi	r25, 0x00	; 0
    20e6:	95 95       	asr	r25
    20e8:	87 95       	ror	r24
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	98 2f       	mov	r25, r24
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	65 e0       	ldi	r22, 0x05	; 5
    20f4:	49 2f       	mov	r20, r25
    20f6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB7_PIN_ID,GET_BIT(commond,3));
    20fa:	fe 01       	movw	r30, r28
    20fc:	eb 5a       	subi	r30, 0xAB	; 171
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	88 70       	andi	r24, 0x08	; 8
    2108:	90 70       	andi	r25, 0x00	; 0
    210a:	95 95       	asr	r25
    210c:	87 95       	ror	r24
    210e:	95 95       	asr	r25
    2110:	87 95       	ror	r24
    2112:	95 95       	asr	r25
    2114:	87 95       	ror	r24
    2116:	98 2f       	mov	r25, r24
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	66 e0       	ldi	r22, 0x06	; 6
    211c:	49 2f       	mov	r20, r25
    211e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e8       	ldi	r26, 0x80	; 128
    2128:	bf e3       	ldi	r27, 0x3F	; 63
    212a:	89 8f       	std	Y+25, r24	; 0x19
    212c:	9a 8f       	std	Y+26, r25	; 0x1a
    212e:	ab 8f       	std	Y+27, r26	; 0x1b
    2130:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	69 8d       	ldd	r22, Y+25	; 0x19
    2134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a e7       	ldi	r20, 0x7A	; 122
    2140:	55 e4       	ldi	r21, 0x45	; 69
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8d 8b       	std	Y+21, r24	; 0x15
    214c:	9e 8b       	std	Y+22, r25	; 0x16
    214e:	af 8b       	std	Y+23, r26	; 0x17
    2150:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2152:	6d 89       	ldd	r22, Y+21	; 0x15
    2154:	7e 89       	ldd	r23, Y+22	; 0x16
    2156:	8f 89       	ldd	r24, Y+23	; 0x17
    2158:	98 8d       	ldd	r25, Y+24	; 0x18
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <LCD_sendCommond+0x5f8>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <LCD_sendCommond+0x676>
	else if (__tmp > 65535)
    2174:	6d 89       	ldd	r22, Y+21	; 0x15
    2176:	7e 89       	ldd	r23, Y+22	; 0x16
    2178:	8f 89       	ldd	r24, Y+23	; 0x17
    217a:	98 8d       	ldd	r25, Y+24	; 0x18
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <LCD_sendCommond+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	69 8d       	ldd	r22, Y+25	; 0x19
    218e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_sendCommond+0x658>
    21b6:	80 e9       	ldi	r24, 0x90	; 144
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	9a 8b       	std	Y+18, r25	; 0x12
    21bc:	89 8b       	std	Y+17, r24	; 0x11
    21be:	89 89       	ldd	r24, Y+17	; 0x11
    21c0:	9a 89       	ldd	r25, Y+18	; 0x12
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_sendCommond+0x646>
    21c6:	9a 8b       	std	Y+18, r25	; 0x12
    21c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8b 89       	ldd	r24, Y+19	; 0x13
    21cc:	9c 89       	ldd	r25, Y+20	; 0x14
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9c 8b       	std	Y+20, r25	; 0x14
    21d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8b 89       	ldd	r24, Y+19	; 0x13
    21d6:	9c 89       	ldd	r25, Y+20	; 0x14
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <LCD_sendCommond+0x63a>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <LCD_sendCommond+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6d 89       	ldd	r22, Y+21	; 0x15
    21e0:	7e 89       	ldd	r23, Y+22	; 0x16
    21e2:	8f 89       	ldd	r24, Y+23	; 0x17
    21e4:	98 8d       	ldd	r25, Y+24	; 0x18
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	8b 89       	ldd	r24, Y+19	; 0x13
    21f4:	9c 89       	ldd	r25, Y+20	; 0x14
    21f6:	98 8b       	std	Y+16, r25	; 0x10
    21f8:	8f 87       	std	Y+15, r24	; 0x0f
    21fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fc:	98 89       	ldd	r25, Y+16	; 0x10
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_sendCommond+0x682>
    2202:	98 8b       	std	Y+16, r25	; 0x10
    2204:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	8b 87       	std	Y+11, r24	; 0x0b
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	ad 87       	std	Y+13, r26	; 0x0d
    221e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6b 85       	ldd	r22, Y+11	; 0x0b
    2222:	7c 85       	ldd	r23, Y+12	; 0x0c
    2224:	8d 85       	ldd	r24, Y+13	; 0x0d
    2226:	9e 85       	ldd	r25, Y+14	; 0x0e
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	55 e4       	ldi	r21, 0x45	; 69
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_sendCommond+0x6e6>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_sendCommond+0x764>
	else if (__tmp > 65535)
    2262:	6f 81       	ldd	r22, Y+7	; 0x07
    2264:	78 85       	ldd	r23, Y+8	; 0x08
    2266:	89 85       	ldd	r24, Y+9	; 0x09
    2268:	9a 85       	ldd	r25, Y+10	; 0x0a
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_sendCommond+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_sendCommond+0x746>
    22a4:	80 e9       	ldi	r24, 0x90	; 144
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	9c 83       	std	Y+4, r25	; 0x04
    22aa:	8b 83       	std	Y+3, r24	; 0x03
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendCommond+0x734>
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8d 81       	ldd	r24, Y+5	; 0x05
    22c4:	9e 81       	ldd	r25, Y+6	; 0x06
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_sendCommond+0x728>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_sendCommond+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	6f 81       	ldd	r22, Y+7	; 0x07
    22ce:	78 85       	ldd	r23, Y+8	; 0x08
    22d0:	89 85       	ldd	r24, Y+9	; 0x09
    22d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	8d 81       	ldd	r24, Y+5	; 0x05
    22e2:	9e 81       	ldd	r25, Y+6	; 0x06
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_sendCommond+0x770>
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_BUS,commond);         // Send command on data bus
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
	_delay_ms(1);
#endif
}
    22f4:	cb 5a       	subi	r28, 0xAB	; 171
    22f6:	df 4f       	sbci	r29, 0xFF	; 255
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	08 95       	ret

0000230c <LCD_displayChar>:

/*
 * Description :
 * Display a single character on the LCD
 */
void LCD_displayChar(uint8 data){
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	c5 55       	subi	r28, 0x55	; 85
    231a:	d0 40       	sbci	r29, 0x00	; 0
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	fe 01       	movw	r30, r28
    2328:	eb 5a       	subi	r30, 0xAB	; 171
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,HIGH);    // RS=1 for char mode
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	41 e0       	ldi	r20, 0x01	; 1
    2334:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2338:	fe 01       	movw	r30, r28
    233a:	ef 5a       	subi	r30, 0xAF	; 175
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a0 e8       	ldi	r26, 0x80	; 128
    2344:	bf e3       	ldi	r27, 0x3F	; 63
    2346:	80 83       	st	Z, r24
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	a2 83       	std	Z+2, r26	; 0x02
    234c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234e:	8e 01       	movw	r16, r28
    2350:	03 5b       	subi	r16, 0xB3	; 179
    2352:	1f 4f       	sbci	r17, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	ef 5a       	subi	r30, 0xAF	; 175
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	55 e4       	ldi	r21, 0x45	; 69
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    237c:	fe 01       	movw	r30, r28
    237e:	e3 5b       	subi	r30, 0xB3	; 179
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	44 f4       	brge	.+16     	; 0x23aa <LCD_displayChar+0x9e>
		__ticks = 1;
    239a:	fe 01       	movw	r30, r28
    239c:	e5 5b       	subi	r30, 0xB5	; 181
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	80 83       	st	Z, r24
    23a8:	64 c0       	rjmp	.+200    	; 0x2472 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    23aa:	fe 01       	movw	r30, r28
    23ac:	e3 5b       	subi	r30, 0xB3	; 179
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	0c f0       	brlt	.+2      	; 0x23ca <LCD_displayChar+0xbe>
    23c8:	43 c0       	rjmp	.+134    	; 0x2450 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	fe 01       	movw	r30, r28
    23cc:	ef 5a       	subi	r30, 0xAF	; 175
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8e 01       	movw	r16, r28
    23ea:	05 5b       	subi	r16, 0xB5	; 181
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
    2400:	1f c0       	rjmp	.+62     	; 0x2440 <LCD_displayChar+0x134>
    2402:	fe 01       	movw	r30, r28
    2404:	e7 5b       	subi	r30, 0xB7	; 183
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 e9       	ldi	r24, 0x90	; 144
    240a:	91 e0       	ldi	r25, 0x01	; 1
    240c:	91 83       	std	Z+1, r25	; 0x01
    240e:	80 83       	st	Z, r24
    2410:	fe 01       	movw	r30, r28
    2412:	e7 5b       	subi	r30, 0xB7	; 183
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_displayChar+0x10e>
    241e:	fe 01       	movw	r30, r28
    2420:	e7 5b       	subi	r30, 0xB7	; 183
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2428:	de 01       	movw	r26, r28
    242a:	a5 5b       	subi	r26, 0xB5	; 181
    242c:	bf 4f       	sbci	r27, 0xFF	; 255
    242e:	fe 01       	movw	r30, r28
    2430:	e5 5b       	subi	r30, 0xB5	; 181
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	9c 93       	st	X, r25
    243e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	fe 01       	movw	r30, r28
    2442:	e5 5b       	subi	r30, 0xB5	; 181
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 81       	ld	r24, Z
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	d1 f6       	brne	.-76     	; 0x2402 <LCD_displayChar+0xf6>
    244e:	27 c0       	rjmp	.+78     	; 0x249e <LCD_displayChar+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	8e 01       	movw	r16, r28
    2452:	05 5b       	subi	r16, 0xB5	; 181
    2454:	1f 4f       	sbci	r17, 0xFF	; 255
    2456:	fe 01       	movw	r30, r28
    2458:	e3 5b       	subi	r30, 0xB3	; 179
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	f8 01       	movw	r30, r16
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	de 01       	movw	r26, r28
    2474:	a9 5b       	subi	r26, 0xB9	; 185
    2476:	bf 4f       	sbci	r27, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	e5 5b       	subi	r30, 0xB5	; 181
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	8d 93       	st	X+, r24
    2484:	9c 93       	st	X, r25
    2486:	fe 01       	movw	r30, r28
    2488:	e9 5b       	subi	r30, 0xB9	; 185
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_displayChar+0x184>
    2494:	fe 01       	movw	r30, r28
    2496:	e9 5b       	subi	r30, 0xB9	; 185
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,HIGH);     // Enable = 1
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    24a8:	fe 01       	movw	r30, r28
    24aa:	ed 5b       	subi	r30, 0xBD	; 189
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 e8       	ldi	r26, 0x80	; 128
    24b4:	bf e3       	ldi	r27, 0x3F	; 63
    24b6:	80 83       	st	Z, r24
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	a2 83       	std	Z+2, r26	; 0x02
    24bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	8e 01       	movw	r16, r28
    24c0:	01 5c       	subi	r16, 0xC1	; 193
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	fe 01       	movw	r30, r28
    24c6:	ed 5b       	subi	r30, 0xBD	; 189
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	60 81       	ld	r22, Z
    24cc:	71 81       	ldd	r23, Z+1	; 0x01
    24ce:	82 81       	ldd	r24, Z+2	; 0x02
    24d0:	93 81       	ldd	r25, Z+3	; 0x03
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	55 e4       	ldi	r21, 0x45	; 69
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	80 83       	st	Z, r24
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	a2 83       	std	Z+2, r26	; 0x02
    24ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ec:	fe 01       	movw	r30, r28
    24ee:	ff 96       	adiw	r30, 0x3f	; 63
    24f0:	60 81       	ld	r22, Z
    24f2:	71 81       	ldd	r23, Z+1	; 0x01
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	93 81       	ldd	r25, Z+3	; 0x03
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <LCD_displayChar+0x206>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e af       	std	Y+62, r25	; 0x3e
    250e:	8d af       	std	Y+61, r24	; 0x3d
    2510:	46 c0       	rjmp	.+140    	; 0x259e <LCD_displayChar+0x292>
	else if (__tmp > 65535)
    2512:	fe 01       	movw	r30, r28
    2514:	ff 96       	adiw	r30, 0x3f	; 63
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	3f ef       	ldi	r19, 0xFF	; 255
    2522:	4f e7       	ldi	r20, 0x7F	; 127
    2524:	57 e4       	ldi	r21, 0x47	; 71
    2526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252a:	18 16       	cp	r1, r24
    252c:	64 f5       	brge	.+88     	; 0x2586 <LCD_displayChar+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252e:	fe 01       	movw	r30, r28
    2530:	ed 5b       	subi	r30, 0xBD	; 189
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	60 81       	ld	r22, Z
    2536:	71 81       	ldd	r23, Z+1	; 0x01
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	93 81       	ldd	r25, Z+3	; 0x03
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e2       	ldi	r20, 0x20	; 32
    2542:	51 e4       	ldi	r21, 0x41	; 65
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	9e af       	std	Y+62, r25	; 0x3e
    255a:	8d af       	std	Y+61, r24	; 0x3d
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_displayChar+0x270>
    255e:	80 e9       	ldi	r24, 0x90	; 144
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	9c af       	std	Y+60, r25	; 0x3c
    2564:	8b af       	std	Y+59, r24	; 0x3b
    2566:	8b ad       	ldd	r24, Y+59	; 0x3b
    2568:	9c ad       	ldd	r25, Y+60	; 0x3c
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_displayChar+0x25e>
    256e:	9c af       	std	Y+60, r25	; 0x3c
    2570:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2572:	8d ad       	ldd	r24, Y+61	; 0x3d
    2574:	9e ad       	ldd	r25, Y+62	; 0x3e
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	9e af       	std	Y+62, r25	; 0x3e
    257a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	8d ad       	ldd	r24, Y+61	; 0x3d
    257e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2580:	00 97       	sbiw	r24, 0x00	; 0
    2582:	69 f7       	brne	.-38     	; 0x255e <LCD_displayChar+0x252>
    2584:	16 c0       	rjmp	.+44     	; 0x25b2 <LCD_displayChar+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2586:	fe 01       	movw	r30, r28
    2588:	ff 96       	adiw	r30, 0x3f	; 63
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e af       	std	Y+62, r25	; 0x3e
    259c:	8d af       	std	Y+61, r24	; 0x3d
    259e:	8d ad       	ldd	r24, Y+61	; 0x3d
    25a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a2:	9a af       	std	Y+58, r25	; 0x3a
    25a4:	89 af       	std	Y+57, r24	; 0x39
    25a6:	89 ad       	ldd	r24, Y+57	; 0x39
    25a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_displayChar+0x29e>
    25ae:	9a af       	std	Y+58, r25	; 0x3a
    25b0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
#if (LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_BUS,LCD_DB4_PIN_ID,GET_BIT(data,4));
    25b2:	fe 01       	movw	r30, r28
    25b4:	eb 5a       	subi	r30, 0xAB	; 171
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	80 71       	andi	r24, 0x10	; 16
    25c0:	90 70       	andi	r25, 0x00	; 0
    25c2:	95 95       	asr	r25
    25c4:	87 95       	ror	r24
    25c6:	95 95       	asr	r25
    25c8:	87 95       	ror	r24
    25ca:	95 95       	asr	r25
    25cc:	87 95       	ror	r24
    25ce:	95 95       	asr	r25
    25d0:	87 95       	ror	r24
    25d2:	98 2f       	mov	r25, r24
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	63 e0       	ldi	r22, 0x03	; 3
    25d8:	49 2f       	mov	r20, r25
    25da:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25de:	fe 01       	movw	r30, r28
    25e0:	eb 5a       	subi	r30, 0xAB	; 171
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	80 72       	andi	r24, 0x20	; 32
    25ec:	90 70       	andi	r25, 0x00	; 0
    25ee:	95 95       	asr	r25
    25f0:	87 95       	ror	r24
    25f2:	95 95       	asr	r25
    25f4:	87 95       	ror	r24
    25f6:	95 95       	asr	r25
    25f8:	87 95       	ror	r24
    25fa:	95 95       	asr	r25
    25fc:	87 95       	ror	r24
    25fe:	95 95       	asr	r25
    2600:	87 95       	ror	r24
    2602:	98 2f       	mov	r25, r24
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	64 e0       	ldi	r22, 0x04	; 4
    2608:	49 2f       	mov	r20, r25
    260a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB6_PIN_ID,GET_BIT(data,6));
    260e:	fe 01       	movw	r30, r28
    2610:	eb 5a       	subi	r30, 0xAB	; 171
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	80 74       	andi	r24, 0x40	; 64
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	08 2e       	mov	r0, r24
    2620:	89 2f       	mov	r24, r25
    2622:	00 0c       	add	r0, r0
    2624:	88 1f       	adc	r24, r24
    2626:	99 0b       	sbc	r25, r25
    2628:	00 0c       	add	r0, r0
    262a:	88 1f       	adc	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	98 2f       	mov	r25, r24
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	65 e0       	ldi	r22, 0x05	; 5
    2634:	49 2f       	mov	r20, r25
    2636:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB7_PIN_ID,GET_BIT(data,7));
    263a:	fe 01       	movw	r30, r28
    263c:	eb 5a       	subi	r30, 0xAB	; 171
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 81       	ld	r24, Z
    2642:	98 2f       	mov	r25, r24
    2644:	99 1f       	adc	r25, r25
    2646:	99 27       	eor	r25, r25
    2648:	99 1f       	adc	r25, r25
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	66 e0       	ldi	r22, 0x06	; 6
    264e:	49 2f       	mov	r20, r25
    2650:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e8       	ldi	r26, 0x80	; 128
    265a:	bf e3       	ldi	r27, 0x3F	; 63
    265c:	8d ab       	std	Y+53, r24	; 0x35
    265e:	9e ab       	std	Y+54, r25	; 0x36
    2660:	af ab       	std	Y+55, r26	; 0x37
    2662:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2664:	6d a9       	ldd	r22, Y+53	; 0x35
    2666:	7e a9       	ldd	r23, Y+54	; 0x36
    2668:	8f a9       	ldd	r24, Y+55	; 0x37
    266a:	98 ad       	ldd	r25, Y+56	; 0x38
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	4a e7       	ldi	r20, 0x7A	; 122
    2672:	55 e4       	ldi	r21, 0x45	; 69
    2674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	89 ab       	std	Y+49, r24	; 0x31
    267e:	9a ab       	std	Y+50, r25	; 0x32
    2680:	ab ab       	std	Y+51, r26	; 0x33
    2682:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2684:	69 a9       	ldd	r22, Y+49	; 0x31
    2686:	7a a9       	ldd	r23, Y+50	; 0x32
    2688:	8b a9       	ldd	r24, Y+51	; 0x33
    268a:	9c a9       	ldd	r25, Y+52	; 0x34
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	2c f4       	brge	.+10     	; 0x26a6 <LCD_displayChar+0x39a>
		__ticks = 1;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	98 ab       	std	Y+48, r25	; 0x30
    26a2:	8f a7       	std	Y+47, r24	; 0x2f
    26a4:	3f c0       	rjmp	.+126    	; 0x2724 <LCD_displayChar+0x418>
	else if (__tmp > 65535)
    26a6:	69 a9       	ldd	r22, Y+49	; 0x31
    26a8:	7a a9       	ldd	r23, Y+50	; 0x32
    26aa:	8b a9       	ldd	r24, Y+51	; 0x33
    26ac:	9c a9       	ldd	r25, Y+52	; 0x34
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ba:	18 16       	cp	r1, r24
    26bc:	4c f5       	brge	.+82     	; 0x2710 <LCD_displayChar+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26be:	6d a9       	ldd	r22, Y+53	; 0x35
    26c0:	7e a9       	ldd	r23, Y+54	; 0x36
    26c2:	8f a9       	ldd	r24, Y+55	; 0x37
    26c4:	98 ad       	ldd	r25, Y+56	; 0x38
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	bc 01       	movw	r22, r24
    26d8:	cd 01       	movw	r24, r26
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	98 ab       	std	Y+48, r25	; 0x30
    26e4:	8f a7       	std	Y+47, r24	; 0x2f
    26e6:	0f c0       	rjmp	.+30     	; 0x2706 <LCD_displayChar+0x3fa>
    26e8:	80 e9       	ldi	r24, 0x90	; 144
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	9e a7       	std	Y+46, r25	; 0x2e
    26ee:	8d a7       	std	Y+45, r24	; 0x2d
    26f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <LCD_displayChar+0x3e8>
    26f8:	9e a7       	std	Y+46, r25	; 0x2e
    26fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	98 ab       	std	Y+48, r25	; 0x30
    2704:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2706:	8f a5       	ldd	r24, Y+47	; 0x2f
    2708:	98 a9       	ldd	r25, Y+48	; 0x30
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	69 f7       	brne	.-38     	; 0x26e8 <LCD_displayChar+0x3dc>
    270e:	14 c0       	rjmp	.+40     	; 0x2738 <LCD_displayChar+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2710:	69 a9       	ldd	r22, Y+49	; 0x31
    2712:	7a a9       	ldd	r23, Y+50	; 0x32
    2714:	8b a9       	ldd	r24, Y+51	; 0x33
    2716:	9c a9       	ldd	r25, Y+52	; 0x34
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	98 ab       	std	Y+48, r25	; 0x30
    2722:	8f a7       	std	Y+47, r24	; 0x2f
    2724:	8f a5       	ldd	r24, Y+47	; 0x2f
    2726:	98 a9       	ldd	r25, Y+48	; 0x30
    2728:	9c a7       	std	Y+44, r25	; 0x2c
    272a:	8b a7       	std	Y+43, r24	; 0x2b
    272c:	8b a5       	ldd	r24, Y+43	; 0x2b
    272e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2730:	01 97       	sbiw	r24, 0x01	; 1
    2732:	f1 f7       	brne	.-4      	; 0x2730 <LCD_displayChar+0x424>
    2734:	9c a7       	std	Y+44, r25	; 0x2c
    2736:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	a0 e8       	ldi	r26, 0x80	; 128
    2748:	bf e3       	ldi	r27, 0x3F	; 63
    274a:	8f a3       	std	Y+39, r24	; 0x27
    274c:	98 a7       	std	Y+40, r25	; 0x28
    274e:	a9 a7       	std	Y+41, r26	; 0x29
    2750:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6f a1       	ldd	r22, Y+39	; 0x27
    2754:	78 a5       	ldd	r23, Y+40	; 0x28
    2756:	89 a5       	ldd	r24, Y+41	; 0x29
    2758:	9a a5       	ldd	r25, Y+42	; 0x2a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a e7       	ldi	r20, 0x7A	; 122
    2760:	55 e4       	ldi	r21, 0x45	; 69
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	8b a3       	std	Y+35, r24	; 0x23
    276c:	9c a3       	std	Y+36, r25	; 0x24
    276e:	ad a3       	std	Y+37, r26	; 0x25
    2770:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2772:	6b a1       	ldd	r22, Y+35	; 0x23
    2774:	7c a1       	ldd	r23, Y+36	; 0x24
    2776:	8d a1       	ldd	r24, Y+37	; 0x25
    2778:	9e a1       	ldd	r25, Y+38	; 0x26
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <LCD_displayChar+0x488>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9a a3       	std	Y+34, r25	; 0x22
    2790:	89 a3       	std	Y+33, r24	; 0x21
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <LCD_displayChar+0x506>
	else if (__tmp > 65535)
    2794:	6b a1       	ldd	r22, Y+35	; 0x23
    2796:	7c a1       	ldd	r23, Y+36	; 0x24
    2798:	8d a1       	ldd	r24, Y+37	; 0x25
    279a:	9e a1       	ldd	r25, Y+38	; 0x26
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <LCD_displayChar+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6f a1       	ldd	r22, Y+39	; 0x27
    27ae:	78 a5       	ldd	r23, Y+40	; 0x28
    27b0:	89 a5       	ldd	r24, Y+41	; 0x29
    27b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9a a3       	std	Y+34, r25	; 0x22
    27d2:	89 a3       	std	Y+33, r24	; 0x21
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <LCD_displayChar+0x4e8>
    27d6:	80 e9       	ldi	r24, 0x90	; 144
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	98 a3       	std	Y+32, r25	; 0x20
    27dc:	8f 8f       	std	Y+31, r24	; 0x1f
    27de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e0:	98 a1       	ldd	r25, Y+32	; 0x20
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <LCD_displayChar+0x4d6>
    27e6:	98 a3       	std	Y+32, r25	; 0x20
    27e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	89 a1       	ldd	r24, Y+33	; 0x21
    27ec:	9a a1       	ldd	r25, Y+34	; 0x22
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9a a3       	std	Y+34, r25	; 0x22
    27f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	89 a1       	ldd	r24, Y+33	; 0x21
    27f6:	9a a1       	ldd	r25, Y+34	; 0x22
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <LCD_displayChar+0x4ca>
    27fc:	14 c0       	rjmp	.+40     	; 0x2826 <LCD_displayChar+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2800:	7c a1       	ldd	r23, Y+36	; 0x24
    2802:	8d a1       	ldd	r24, Y+37	; 0x25
    2804:	9e a1       	ldd	r25, Y+38	; 0x26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9a a3       	std	Y+34, r25	; 0x22
    2810:	89 a3       	std	Y+33, r24	; 0x21
    2812:	89 a1       	ldd	r24, Y+33	; 0x21
    2814:	9a a1       	ldd	r25, Y+34	; 0x22
    2816:	9e 8f       	std	Y+30, r25	; 0x1e
    2818:	8d 8f       	std	Y+29, r24	; 0x1d
    281a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <LCD_displayChar+0x512>
    2822:	9e 8f       	std	Y+30, r25	; 0x1e
    2824:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,HIGH);      // Enable = 1 (Latch data)
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	62 e0       	ldi	r22, 0x02	; 2
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>

	GPIO_writePin(LCD_DATA_BUS,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2830:	fe 01       	movw	r30, r28
    2832:	eb 5a       	subi	r30, 0xAB	; 171
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	98 2f       	mov	r25, r24
    283a:	91 70       	andi	r25, 0x01	; 1
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	63 e0       	ldi	r22, 0x03	; 3
    2840:	49 2f       	mov	r20, r25
    2842:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2846:	fe 01       	movw	r30, r28
    2848:	eb 5a       	subi	r30, 0xAB	; 171
    284a:	ff 4f       	sbci	r31, 0xFF	; 255
    284c:	80 81       	ld	r24, Z
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	82 70       	andi	r24, 0x02	; 2
    2854:	90 70       	andi	r25, 0x00	; 0
    2856:	95 95       	asr	r25
    2858:	87 95       	ror	r24
    285a:	98 2f       	mov	r25, r24
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	64 e0       	ldi	r22, 0x04	; 4
    2860:	49 2f       	mov	r20, r25
    2862:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2866:	fe 01       	movw	r30, r28
    2868:	eb 5a       	subi	r30, 0xAB	; 171
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	88 2f       	mov	r24, r24
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	84 70       	andi	r24, 0x04	; 4
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	95 95       	asr	r25
    2878:	87 95       	ror	r24
    287a:	95 95       	asr	r25
    287c:	87 95       	ror	r24
    287e:	98 2f       	mov	r25, r24
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	65 e0       	ldi	r22, 0x05	; 5
    2884:	49 2f       	mov	r20, r25
    2886:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_BUS,LCD_DB7_PIN_ID,GET_BIT(data,3));
    288a:	fe 01       	movw	r30, r28
    288c:	eb 5a       	subi	r30, 0xAB	; 171
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 81       	ld	r24, Z
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	88 70       	andi	r24, 0x08	; 8
    2898:	90 70       	andi	r25, 0x00	; 0
    289a:	95 95       	asr	r25
    289c:	87 95       	ror	r24
    289e:	95 95       	asr	r25
    28a0:	87 95       	ror	r24
    28a2:	95 95       	asr	r25
    28a4:	87 95       	ror	r24
    28a6:	98 2f       	mov	r25, r24
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	66 e0       	ldi	r22, 0x06	; 6
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	89 8f       	std	Y+25, r24	; 0x19
    28bc:	9a 8f       	std	Y+26, r25	; 0x1a
    28be:	ab 8f       	std	Y+27, r26	; 0x1b
    28c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	69 8d       	ldd	r22, Y+25	; 0x19
    28c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a e7       	ldi	r20, 0x7A	; 122
    28d0:	55 e4       	ldi	r21, 0x45	; 69
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8d 8b       	std	Y+21, r24	; 0x15
    28dc:	9e 8b       	std	Y+22, r25	; 0x16
    28de:	af 8b       	std	Y+23, r26	; 0x17
    28e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <LCD_displayChar+0x5f8>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	8b 8b       	std	Y+19, r24	; 0x13
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <LCD_displayChar+0x676>
	else if (__tmp > 65535)
    2904:	6d 89       	ldd	r22, Y+21	; 0x15
    2906:	7e 89       	ldd	r23, Y+22	; 0x16
    2908:	8f 89       	ldd	r24, Y+23	; 0x17
    290a:	98 8d       	ldd	r25, Y+24	; 0x18
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <LCD_displayChar+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	69 8d       	ldd	r22, Y+25	; 0x19
    291e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9c 8b       	std	Y+20, r25	; 0x14
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <LCD_displayChar+0x658>
    2946:	80 e9       	ldi	r24, 0x90	; 144
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	9a 8b       	std	Y+18, r25	; 0x12
    294c:	89 8b       	std	Y+17, r24	; 0x11
    294e:	89 89       	ldd	r24, Y+17	; 0x11
    2950:	9a 89       	ldd	r25, Y+18	; 0x12
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_displayChar+0x646>
    2956:	9a 8b       	std	Y+18, r25	; 0x12
    2958:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <LCD_displayChar+0x63a>
    296c:	14 c0       	rjmp	.+40     	; 0x2996 <LCD_displayChar+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
    2982:	8b 89       	ldd	r24, Y+19	; 0x13
    2984:	9c 89       	ldd	r25, Y+20	; 0x14
    2986:	98 8b       	std	Y+16, r25	; 0x10
    2988:	8f 87       	std	Y+15, r24	; 0x0f
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	98 89       	ldd	r25, Y+16	; 0x10
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_displayChar+0x682>
    2992:	98 8b       	std	Y+16, r25	; 0x10
    2994:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	62 e0       	ldi	r22, 0x02	; 2
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a0 e8       	ldi	r26, 0x80	; 128
    29a6:	bf e3       	ldi	r27, 0x3F	; 63
    29a8:	8b 87       	std	Y+11, r24	; 0x0b
    29aa:	9c 87       	std	Y+12, r25	; 0x0c
    29ac:	ad 87       	std	Y+13, r26	; 0x0d
    29ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	4a e7       	ldi	r20, 0x7A	; 122
    29be:	55 e4       	ldi	r21, 0x45	; 69
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	8f 83       	std	Y+7, r24	; 0x07
    29ca:	98 87       	std	Y+8, r25	; 0x08
    29cc:	a9 87       	std	Y+9, r26	; 0x09
    29ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f e3       	ldi	r21, 0x3F	; 63
    29e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e4:	88 23       	and	r24, r24
    29e6:	2c f4       	brge	.+10     	; 0x29f2 <LCD_displayChar+0x6e6>
		__ticks = 1;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	3f c0       	rjmp	.+126    	; 0x2a70 <LCD_displayChar+0x764>
	else if (__tmp > 65535)
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	3f ef       	ldi	r19, 0xFF	; 255
    29fe:	4f e7       	ldi	r20, 0x7F	; 127
    2a00:	57 e4       	ldi	r21, 0x47	; 71
    2a02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	4c f5       	brge	.+82     	; 0x2a5c <LCD_displayChar+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	40 e2       	ldi	r20, 0x20	; 32
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	bc 01       	movw	r22, r24
    2a24:	cd 01       	movw	r24, r26
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9e 83       	std	Y+6, r25	; 0x06
    2a30:	8d 83       	std	Y+5, r24	; 0x05
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <LCD_displayChar+0x746>
    2a34:	80 e9       	ldi	r24, 0x90	; 144
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	9c 83       	std	Y+4, r25	; 0x04
    2a3a:	8b 83       	std	Y+3, r24	; 0x03
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_displayChar+0x734>
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	9e 83       	std	Y+6, r25	; 0x06
    2a50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	69 f7       	brne	.-38     	; 0x2a34 <LCD_displayChar+0x728>
    2a5a:	14 c0       	rjmp	.+40     	; 0x2a84 <LCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	8d 81       	ldd	r24, Y+5	; 0x05
    2a72:	9e 81       	ldd	r25, Y+6	; 0x06
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <LCD_displayChar+0x770>
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_BUS,data);         // Send command on data bus
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOW);      // Enable = 0 (Latch data)
	_delay_ms(1);
#endif
}
    2a84:	cb 5a       	subi	r28, 0xAB	; 171
    2a86:	df 4f       	sbci	r29, 0xFF	; 255
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <LCD_displayString>:

/*
 * Description :
 * Display a string on the LCD
 */
void LCD_displayString(uint8 *str){
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <LCD_displayString+0x6>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9b 83       	std	Y+3, r25	; 0x03
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aac:	19 82       	std	Y+1, r1	; 0x01
    2aae:	0e c0       	rjmp	.+28     	; 0x2acc <LCD_displayString+0x30>
	while(str[i] != '\0'){                        // Loop until end of string
		LCD_displayChar(str[i]);                  // Display each character
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aba:	fc 01       	movw	r30, r24
    2abc:	e2 0f       	add	r30, r18
    2abe:	f3 1f       	adc	r31, r19
    2ac0:	80 81       	ld	r24, Z
    2ac2:	0e 94 86 11 	call	0x230c	; 0x230c <LCD_displayChar>
		i++;
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	8f 5f       	subi	r24, 0xFF	; 255
    2aca:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display a string on the LCD
 */
void LCD_displayString(uint8 *str){
	uint8 i = 0;
	while(str[i] != '\0'){                        // Loop until end of string
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	80 81       	ld	r24, Z
    2ade:	88 23       	and	r24, r24
    2ae0:	39 f7       	brne	.-50     	; 0x2ab0 <LCD_displayString+0x14>
		LCD_displayChar(str[i]);                  // Display each character
		i++;
	}
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <LCD_moveCursur>:

/*
 * Description :
 * Move the cursor to a specific row and column
 */
void LCD_moveCursur(uint8 row, uint8 col){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <LCD_moveCursur+0x6>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <LCD_moveCursur+0x8>
    2af6:	0f 92       	push	r0
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	8a 83       	std	Y+2, r24	; 0x02
    2afe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row){
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	3d 83       	std	Y+5, r19	; 0x05
    2b08:	2c 83       	std	Y+4, r18	; 0x04
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b0e:	81 30       	cpi	r24, 0x01	; 1
    2b10:	91 05       	cpc	r25, r1
    2b12:	c1 f0       	breq	.+48     	; 0x2b44 <LCD_moveCursur+0x56>
    2b14:	2c 81       	ldd	r18, Y+4	; 0x04
    2b16:	3d 81       	ldd	r19, Y+5	; 0x05
    2b18:	22 30       	cpi	r18, 0x02	; 2
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <LCD_moveCursur+0x3a>
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	9d 81       	ldd	r25, Y+5	; 0x05
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	61 f0       	breq	.+24     	; 0x2b3e <LCD_moveCursur+0x50>
    2b26:	19 c0       	rjmp	.+50     	; 0x2b5a <LCD_moveCursur+0x6c>
    2b28:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b2c:	22 30       	cpi	r18, 0x02	; 2
    2b2e:	31 05       	cpc	r19, r1
    2b30:	69 f0       	breq	.+26     	; 0x2b4c <LCD_moveCursur+0x5e>
    2b32:	8c 81       	ldd	r24, Y+4	; 0x04
    2b34:	9d 81       	ldd	r25, Y+5	; 0x05
    2b36:	83 30       	cpi	r24, 0x03	; 3
    2b38:	91 05       	cpc	r25, r1
    2b3a:	61 f0       	breq	.+24     	; 0x2b54 <LCD_moveCursur+0x66>
    2b3c:	0e c0       	rjmp	.+28     	; 0x2b5a <LCD_moveCursur+0x6c>
	case 0:
		lcd_memory_address = col;
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	89 83       	std	Y+1, r24	; 0x01
    2b42:	0b c0       	rjmp	.+22     	; 0x2b5a <LCD_moveCursur+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	80 5c       	subi	r24, 0xC0	; 192
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	07 c0       	rjmp	.+14     	; 0x2b5a <LCD_moveCursur+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	80 5f       	subi	r24, 0xF0	; 240
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <LCD_moveCursur+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	80 5b       	subi	r24, 0xB0	; 176
    2b58:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommond(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	80 68       	ori	r24, 0x80	; 128
    2b5e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
}
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display a string starting from a specific row and column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2b72:	df 93       	push	r29
    2b74:	cf 93       	push	r28
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <LCD_displayStringRowColumn+0x6>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <LCD_displayStringRowColumn+0x8>
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	6a 83       	std	Y+2, r22	; 0x02
    2b82:	5c 83       	std	Y+4, r21	; 0x04
    2b84:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursur(row,col);   // Move cursor to required position
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	6a 81       	ldd	r22, Y+2	; 0x02
    2b8a:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_moveCursur>
	LCD_displayString(Str);    // Display string
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <LCD_displayString>
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <LCD_itos>:

/*
 * Description :
 * Convert an integer value to string and display it on the LCD
 */
void LCD_itos(uint8 data){
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	61 97       	sbiw	r28, 0x11	; 17
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buff[16];                 // Buffer to store string result
	itoa(data,buff,10);             // Convert integer to string (base 10)
    2bba:	89 89       	ldd	r24, Y+17	; 0x11
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 01       	movw	r18, r28
    2bc2:	2f 5f       	subi	r18, 0xFF	; 255
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	4a e0       	ldi	r20, 0x0A	; 10
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	0e 94 08 18 	call	0x3010	; 0x3010 <itoa>
	LCD_displayString(buff);        // Display string on LCD
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	01 96       	adiw	r24, 0x01	; 1
    2bd4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <LCD_displayString>
}
    2bd8:	61 96       	adiw	r28, 0x11	; 17
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <LCD_clearScreen>:

/*
 * Description :
 * Clear the LCD screen
 */
void LCD_clearScreen(void){
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommond(LCD_CLEAR_SCREEN);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <LCD_sendCommond>
}
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <Buzzer_init>:
 * Description:
 * Initialize the buzzer:
 * - Set the buzzer pin as output.
 * - Start with buzzer OFF (logic LOW).
 */
void Buzzer_init(void){
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, pin_output);
    2c06:	82 e0       	ldi	r24, 0x02	; 2
    2c08:	65 e0       	ldi	r22, 0x05	; 5
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOW);
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	65 e0       	ldi	r22, 0x05	; 5
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <Buzzer_on>:

/*
 * Description:
 * Turn the buzzer ON (logic HIGH).
 */
void Buzzer_on(void){
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, HIGH);
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	65 e0       	ldi	r22, 0x05	; 5
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <Buzzer_off>:

/*
 * Description:
 * Turn the buzzer OFF (logic LOW).
 */
void Buzzer_off(void){
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOW);
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <main>:
#include "HAL/LED/LED.h"
#include "HAL/Ultrasonic/Ultrasonic.h"
#include <util/delay.h>
#include <avr/io.h>

int main(void) {
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	6e 97       	sbiw	r28, 0x1e	; 30
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61

	uint16 Distance; // Variable to store the distance measured by the ultrasonic sensor

	LCD_init();                 // Initialize the LCD display
    2c64:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <LCD_init>
	LEDS_init();                // Initialize the LED system
    2c68:	0e 94 85 0c 	call	0x190a	; 0x190a <LEDS_init>
	Buzzer_init();              // Initialize the buzzer
    2c6c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <Buzzer_init>
	Ultrasonic_init();          // Initialize the ultrasonic sensor
    2c70:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <Ultrasonic_init>

	SREG |= (1 << 7); // Enable global interrupts by setting the I-bit in the status register
    2c74:	af e5       	ldi	r26, 0x5F	; 95
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	ef e5       	ldi	r30, 0x5F	; 95
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	80 68       	ori	r24, 0x80	; 128
    2c80:	8c 93       	st	X, r24

	LCD_displayStringRowColumn(0, 1, "Distance=   CM"); // Display the initial message on the LCD
    2c82:	20 e6       	ldi	r18, 0x60	; 96
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	a9 01       	movw	r20, r18
    2c8c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>

	while (1) {
		// Read the distance from the ultrasonic sensor
		Distance = Ultrasonic_readDistance() + 1; // Read and adjust the distance value (+1 for rounding)
    2c90:	0e 94 44 0c 	call	0x1888	; 0x1888 <Ultrasonic_readDistance>
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	9e 8f       	std	Y+30, r25	; 0x1e
    2c98:	8d 8f       	std	Y+29, r24	; 0x1d

		// Update the distance on the LCD at row 0, column 10
		LCD_moveCursur(0, 10);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	6a e0       	ldi	r22, 0x0A	; 10
    2c9e:	0e 94 77 15 	call	0x2aee	; 0x2aee <LCD_moveCursur>
		LCD_itos(Distance); // Convert integer to string and display it on the LCD
    2ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca4:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <LCD_itos>

		// Clean up the display if the distance is less than 10 cm to avoid leftover characters
		if (Distance < 10) {
    2ca8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2caa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cac:	8a 30       	cpi	r24, 0x0A	; 10
    2cae:	91 05       	cpc	r25, r1
    2cb0:	38 f4       	brcc	.+14     	; 0x2cc0 <main+0x70>
			LCD_displayStringRowColumn(0, 11, " "); // Clear any extra digits on the LCD
    2cb2:	2f e6       	ldi	r18, 0x6F	; 111
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	6b e0       	ldi	r22, 0x0B	; 11
    2cba:	a9 01       	movw	r20, r18
    2cbc:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
		}

		// Conditional actions based on distance
		if (Distance > 20) {
    2cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cc4:	85 31       	cpi	r24, 0x15	; 21
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	98 f0       	brcs	.+38     	; 0x2cf0 <main+0xa0>
			// If the distance is greater than 20 cm, turn off all LEDs and the buzzer
			LED_off(RED_LED);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			LED_off(GREEN_LED);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			LED_off(BLUE_LED);
    2cd6:	82 e0       	ldi	r24, 0x02	; 2
    2cd8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			Buzzer_off();
    2cdc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Buzzer_off>
			LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    2ce0:	21 e7       	ldi	r18, 0x71	; 113
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	67 e0       	ldi	r22, 0x07	; 7
    2ce8:	a9 01       	movw	r20, r18
    2cea:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
    2cee:	d0 cf       	rjmp	.-96     	; 0x2c90 <main+0x40>
		} else if (Distance >= 16 && Distance <= 20) {
    2cf0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cf4:	80 31       	cpi	r24, 0x10	; 16
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	c0 f0       	brcs	.+48     	; 0x2d2a <main+0xda>
    2cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cfe:	85 31       	cpi	r24, 0x15	; 21
    2d00:	91 05       	cpc	r25, r1
    2d02:	98 f4       	brcc	.+38     	; 0x2d2a <main+0xda>
			// If the distance is between 16 and 20 cm, turn on the red LED only
			LED_on(RED_LED);
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_off(GREEN_LED);
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			LED_off(BLUE_LED);
    2d10:	82 e0       	ldi	r24, 0x02	; 2
    2d12:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			Buzzer_off();
    2d16:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Buzzer_off>
			LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    2d1a:	21 e7       	ldi	r18, 0x71	; 113
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	67 e0       	ldi	r22, 0x07	; 7
    2d22:	a9 01       	movw	r20, r18
    2d24:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
    2d28:	b3 cf       	rjmp	.-154    	; 0x2c90 <main+0x40>
		} else if (Distance >= 11 && Distance <= 15) {
    2d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d2e:	8b 30       	cpi	r24, 0x0B	; 11
    2d30:	91 05       	cpc	r25, r1
    2d32:	c0 f0       	brcs	.+48     	; 0x2d64 <main+0x114>
    2d34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d38:	80 31       	cpi	r24, 0x10	; 16
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	98 f4       	brcc	.+38     	; 0x2d64 <main+0x114>
			// If the distance is between 11 and 15 cm, turn on the red and green LEDs
			LED_on(RED_LED);
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_on(GREEN_LED);
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_off(BLUE_LED);
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			Buzzer_off();
    2d50:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Buzzer_off>
			LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    2d54:	21 e7       	ldi	r18, 0x71	; 113
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	67 e0       	ldi	r22, 0x07	; 7
    2d5c:	a9 01       	movw	r20, r18
    2d5e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
    2d62:	96 cf       	rjmp	.-212    	; 0x2c90 <main+0x40>
		} else if (Distance >= 6 && Distance <= 10) {
    2d64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d68:	86 30       	cpi	r24, 0x06	; 6
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	c0 f0       	brcs	.+48     	; 0x2d9e <main+0x14e>
    2d6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d72:	8b 30       	cpi	r24, 0x0B	; 11
    2d74:	91 05       	cpc	r25, r1
    2d76:	98 f4       	brcc	.+38     	; 0x2d9e <main+0x14e>
			// If the distance is between 6 and 10 cm, turn on red, green, and blue LEDs
			LED_on(RED_LED);
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_on(GREEN_LED);
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_on(BLUE_LED);
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			Buzzer_off();
    2d8a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Buzzer_off>
			LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    2d8e:	21 e7       	ldi	r18, 0x71	; 113
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	67 e0       	ldi	r22, 0x07	; 7
    2d96:	a9 01       	movw	r20, r18
    2d98:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
    2d9c:	79 cf       	rjmp	.-270    	; 0x2c90 <main+0x40>
		} else {
			// If the distance is less than or equal to 5 cm, display "STOP" and turn on the buzzer with blinking LEDs
			LCD_displayStringRowColumn(1, 7, "STOP! TOO CLOSE!"); // Display "STOP" on the LCD
    2d9e:	26 e7       	ldi	r18, 0x76	; 118
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	67 e0       	ldi	r22, 0x07	; 7
    2da6:	a9 01       	movw	r20, r18
    2da8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <LCD_displayStringRowColumn>
			LED_on(RED_LED);
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_on(GREEN_LED);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			LED_on(BLUE_LED);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	0e 94 aa 0c 	call	0x1954	; 0x1954 <LED_on>
			Buzzer_on();             // Turn on the buzzer
    2dbe:	0e 94 10 16 	call	0x2c20	; 0x2c20 <Buzzer_on>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a8 ec       	ldi	r26, 0xC8	; 200
    2dc8:	b2 e4       	ldi	r27, 0x42	; 66
    2dca:	89 8f       	std	Y+25, r24	; 0x19
    2dcc:	9a 8f       	std	Y+26, r25	; 0x1a
    2dce:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a e7       	ldi	r20, 0x7A	; 122
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	8d 8b       	std	Y+21, r24	; 0x15
    2dec:	9e 8b       	std	Y+22, r25	; 0x16
    2dee:	af 8b       	std	Y+23, r26	; 0x17
    2df0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2df2:	6d 89       	ldd	r22, Y+21	; 0x15
    2df4:	7e 89       	ldd	r23, Y+22	; 0x16
    2df6:	8f 89       	ldd	r24, Y+23	; 0x17
    2df8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	2c f4       	brge	.+10     	; 0x2e14 <main+0x1c4>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9c 8b       	std	Y+20, r25	; 0x14
    2e10:	8b 8b       	std	Y+19, r24	; 0x13
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <main+0x242>
	else if (__tmp > 65535)
    2e14:	6d 89       	ldd	r22, Y+21	; 0x15
    2e16:	7e 89       	ldd	r23, Y+22	; 0x16
    2e18:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	4c f5       	brge	.+82     	; 0x2e7e <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	9c 8b       	std	Y+20, r25	; 0x14
    2e52:	8b 8b       	std	Y+19, r24	; 0x13
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <main+0x224>
    2e56:	80 e9       	ldi	r24, 0x90	; 144
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
    2e5e:	89 89       	ldd	r24, Y+17	; 0x11
    2e60:	9a 89       	ldd	r25, Y+18	; 0x12
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <main+0x212>
    2e66:	9a 8b       	std	Y+18, r25	; 0x12
    2e68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	9c 8b       	std	Y+20, r25	; 0x14
    2e72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e74:	8b 89       	ldd	r24, Y+19	; 0x13
    2e76:	9c 89       	ldd	r25, Y+20	; 0x14
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <main+0x206>
    2e7c:	14 c0       	rjmp	.+40     	; 0x2ea6 <main+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e80:	7e 89       	ldd	r23, Y+22	; 0x16
    2e82:	8f 89       	ldd	r24, Y+23	; 0x17
    2e84:	98 8d       	ldd	r25, Y+24	; 0x18
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	9c 8b       	std	Y+20, r25	; 0x14
    2e90:	8b 8b       	std	Y+19, r24	; 0x13
    2e92:	8b 89       	ldd	r24, Y+19	; 0x13
    2e94:	9c 89       	ldd	r25, Y+20	; 0x14
    2e96:	98 8b       	std	Y+16, r25	; 0x10
    2e98:	8f 87       	std	Y+15, r24	; 0x0f
    2e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e9c:	98 89       	ldd	r25, Y+16	; 0x10
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <main+0x24e>
    2ea2:	98 8b       	std	Y+16, r25	; 0x10
    2ea4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);          // Wait for 100 ms
			LED_off(RED_LED);
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			LED_off(GREEN_LED);
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			LED_off(BLUE_LED);
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_off>
			Buzzer_off();            // Turn off the buzzer
    2eb8:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <Buzzer_off>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a8 ec       	ldi	r26, 0xC8	; 200
    2ec2:	b2 e4       	ldi	r27, 0x42	; 66
    2ec4:	8b 87       	std	Y+11, r24	; 0x0b
    2ec6:	9c 87       	std	Y+12, r25	; 0x0c
    2ec8:	ad 87       	std	Y+13, r26	; 0x0d
    2eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a e7       	ldi	r20, 0x7A	; 122
    2eda:	55 e4       	ldi	r21, 0x45	; 69
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8f 83       	std	Y+7, r24	; 0x07
    2ee6:	98 87       	std	Y+8, r25	; 0x08
    2ee8:	a9 87       	std	Y+9, r26	; 0x09
    2eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	2c f4       	brge	.+10     	; 0x2f0e <main+0x2be>
		__ticks = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	3f c0       	rjmp	.+126    	; 0x2f8c <main+0x33c>
	else if (__tmp > 65535)
    2f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f10:	78 85       	ldd	r23, Y+8	; 0x08
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	57 e4       	ldi	r21, 0x47	; 71
    2f1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f22:	18 16       	cp	r1, r24
    2f24:	4c f5       	brge	.+82     	; 0x2f78 <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e2       	ldi	r20, 0x20	; 32
    2f34:	51 e4       	ldi	r21, 0x41	; 65
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	0f c0       	rjmp	.+30     	; 0x2f6e <main+0x31e>
    2f50:	80 e9       	ldi	r24, 0x90	; 144
    2f52:	91 e0       	ldi	r25, 0x01	; 1
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <main+0x30c>
    2f60:	9c 83       	std	Y+4, r25	; 0x04
    2f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	69 f7       	brne	.-38     	; 0x2f50 <main+0x300>
    2f76:	8c ce       	rjmp	.-744    	; 0x2c90 <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <main+0x348>
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	89 83       	std	Y+1, r24	; 0x01
    2fa0:	77 ce       	rjmp	.-786    	; 0x2c90 <main+0x40>

00002fa2 <__prologue_saves__>:
    2fa2:	2f 92       	push	r2
    2fa4:	3f 92       	push	r3
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	ca 1b       	sub	r28, r26
    2fcc:	db 0b       	sbc	r29, r27
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	09 94       	ijmp

00002fda <__epilogue_restores__>:
    2fda:	2a 88       	ldd	r2, Y+18	; 0x12
    2fdc:	39 88       	ldd	r3, Y+17	; 0x11
    2fde:	48 88       	ldd	r4, Y+16	; 0x10
    2fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fec:	b9 84       	ldd	r11, Y+9	; 0x09
    2fee:	c8 84       	ldd	r12, Y+8	; 0x08
    2ff0:	df 80       	ldd	r13, Y+7	; 0x07
    2ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff8:	1b 81       	ldd	r17, Y+3	; 0x03
    2ffa:	aa 81       	ldd	r26, Y+2	; 0x02
    2ffc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ffe:	ce 0f       	add	r28, r30
    3000:	d1 1d       	adc	r29, r1
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	ed 01       	movw	r28, r26
    300e:	08 95       	ret

00003010 <itoa>:
    3010:	fb 01       	movw	r30, r22
    3012:	9f 01       	movw	r18, r30
    3014:	e8 94       	clt
    3016:	42 30       	cpi	r20, 0x02	; 2
    3018:	c4 f0       	brlt	.+48     	; 0x304a <itoa+0x3a>
    301a:	45 32       	cpi	r20, 0x25	; 37
    301c:	b4 f4       	brge	.+44     	; 0x304a <itoa+0x3a>
    301e:	4a 30       	cpi	r20, 0x0A	; 10
    3020:	29 f4       	brne	.+10     	; 0x302c <itoa+0x1c>
    3022:	97 fb       	bst	r25, 7
    3024:	1e f4       	brtc	.+6      	; 0x302c <itoa+0x1c>
    3026:	90 95       	com	r25
    3028:	81 95       	neg	r24
    302a:	9f 4f       	sbci	r25, 0xFF	; 255
    302c:	64 2f       	mov	r22, r20
    302e:	77 27       	eor	r23, r23
    3030:	0e 94 39 18 	call	0x3072	; 0x3072 <__udivmodhi4>
    3034:	80 5d       	subi	r24, 0xD0	; 208
    3036:	8a 33       	cpi	r24, 0x3A	; 58
    3038:	0c f0       	brlt	.+2      	; 0x303c <itoa+0x2c>
    303a:	89 5d       	subi	r24, 0xD9	; 217
    303c:	81 93       	st	Z+, r24
    303e:	cb 01       	movw	r24, r22
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	a1 f7       	brne	.-24     	; 0x302c <itoa+0x1c>
    3044:	16 f4       	brtc	.+4      	; 0x304a <itoa+0x3a>
    3046:	5d e2       	ldi	r21, 0x2D	; 45
    3048:	51 93       	st	Z+, r21
    304a:	10 82       	st	Z, r1
    304c:	c9 01       	movw	r24, r18
    304e:	0c 94 29 18 	jmp	0x3052	; 0x3052 <strrev>

00003052 <strrev>:
    3052:	dc 01       	movw	r26, r24
    3054:	fc 01       	movw	r30, r24
    3056:	67 2f       	mov	r22, r23
    3058:	71 91       	ld	r23, Z+
    305a:	77 23       	and	r23, r23
    305c:	e1 f7       	brne	.-8      	; 0x3056 <strrev+0x4>
    305e:	32 97       	sbiw	r30, 0x02	; 2
    3060:	04 c0       	rjmp	.+8      	; 0x306a <strrev+0x18>
    3062:	7c 91       	ld	r23, X
    3064:	6d 93       	st	X+, r22
    3066:	70 83       	st	Z, r23
    3068:	62 91       	ld	r22, -Z
    306a:	ae 17       	cp	r26, r30
    306c:	bf 07       	cpc	r27, r31
    306e:	c8 f3       	brcs	.-14     	; 0x3062 <strrev+0x10>
    3070:	08 95       	ret

00003072 <__udivmodhi4>:
    3072:	aa 1b       	sub	r26, r26
    3074:	bb 1b       	sub	r27, r27
    3076:	51 e1       	ldi	r21, 0x11	; 17
    3078:	07 c0       	rjmp	.+14     	; 0x3088 <__udivmodhi4_ep>

0000307a <__udivmodhi4_loop>:
    307a:	aa 1f       	adc	r26, r26
    307c:	bb 1f       	adc	r27, r27
    307e:	a6 17       	cp	r26, r22
    3080:	b7 07       	cpc	r27, r23
    3082:	10 f0       	brcs	.+4      	; 0x3088 <__udivmodhi4_ep>
    3084:	a6 1b       	sub	r26, r22
    3086:	b7 0b       	sbc	r27, r23

00003088 <__udivmodhi4_ep>:
    3088:	88 1f       	adc	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	5a 95       	dec	r21
    308e:	a9 f7       	brne	.-22     	; 0x307a <__udivmodhi4_loop>
    3090:	80 95       	com	r24
    3092:	90 95       	com	r25
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	08 95       	ret

0000309a <_exit>:
    309a:	f8 94       	cli

0000309c <__stop_program>:
    309c:	ff cf       	rjmp	.-2      	; 0x309c <__stop_program>

/******************************************************************************
 *
 * Module: Main Application
 *
 * File Name: main.c
 *
 * Description: Main application for Car Parking Sensor System
 *
 * Author: Your Name
 *
 *******************************************************************************/

#include "MCAL/GPIO/GPIO.h"
#include "HAL/LCD/LCD.h"
#include "HAL/BUZZER/BUZZER.h"
#include "HAL/LED/LED.h"
#include "HAL/Ultrasonic/Ultrasonic.h"
#include <util/delay.h>
#include <avr/io.h>

/*******************************************************************************
 *                                Definitions                                  *
 *******************************************************************************/

/* Distance thresholds in centimeters - Exactly as in PDF */
#define STOP_DISTANCE           5
#define VERY_CLOSE_DISTANCE     10
#define CLOSE_DISTANCE          15
#define MEDIUM_DISTANCE         20

/* Delay between measurements in milliseconds */
#define MEASUREMENT_DELAY       300  /* Increased for stability */

/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/

void ControlIndicators(uint16 distance);
void DisplayDistance(uint16 distance);

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ControlIndicators(uint16 distance)
{
    static uint8 blinkState = 0;
    static uint16 blinkCounter = 0;

    /* Handle blinking for stop condition */
    if (distance <= STOP_DISTANCE && distance > 0)
    {
        blinkCounter++;
        if (blinkCounter >= 5) {  /* Change state every 5 cycles */
            blinkState = !blinkState;
            blinkCounter = 0;
        }

        if (blinkState) {
            /* Blink ON state */
            LED_on(RED_LED);
            LED_on(GREEN_LED);
            LED_on(BLUE_LED);
            Buzzer_on();
        } else {
            /* Blink OFF state */
            LED_off(RED_LED);
            LED_off(GREEN_LED);
            LED_off(BLUE_LED);
            Buzzer_off();
        }
    }
    else
    {
        /* Reset blinking state */
        blinkState = 0;
        blinkCounter = 0;

        /* Turn off all LEDs and buzzer first */
        LED_off(RED_LED);
        LED_off(GREEN_LED);
        LED_off(BLUE_LED);
        Buzzer_off();

        /* Exactly as specified in PDF */
        if (distance >= 6 && distance <= VERY_CLOSE_DISTANCE)
        {
            /* 6-10 cm: All LEDs ON, No buzzer */
            LED_on(RED_LED);
            LED_on(GREEN_LED);
            LED_on(BLUE_LED);
        }
        else if (distance >= 11 && distance <= CLOSE_DISTANCE)
        {
            /* 11-15 cm: Red and Green LEDs ON, Blue LED OFF */
            LED_on(RED_LED);
            LED_on(GREEN_LED);
            LED_off(BLUE_LED);
        }
        else if (distance >= 16 && distance <= MEDIUM_DISTANCE)
        {
            /* 16-20 cm: Only Red LED ON, others OFF */
            LED_on(RED_LED);
            LED_off(GREEN_LED);
            LED_off(BLUE_LED);
        }
        /* For distance > 20, everything is already OFF */
    }
}

void DisplayDistance(uint16 distance)
{
    static uint16 lastDistance = 0;

    /* Only update display if distance changed significantly */
    if (distance != lastDistance)
    {
        /* Clear only specific parts to avoid flickering */
        LCD_moveCursur(0, 0);
        LCD_displayString("Distance:    cm");

        /* Update distance value */
        LCD_moveCursur(0, 10);
        if (distance < 100) {
            LCD_displayString(" ");
        }
        if (distance < 10) {
            LCD_displayString(" ");
        }
        LCD_itos(distance);

        /* Display warning message as per PDF */
        LCD_moveCursur(1, 0);
        if (distance <= STOP_DISTANCE && distance > 0)
        {
            LCD_displayString("     STOP!     ");
        }
        else if (distance == 0)
        {
            LCD_displayString("  NO SIGNAL    ");
        }
        else
        {
            LCD_displayString("               ");
        }

        lastDistance = distance;
    }
}

int main(void)
{
    uint16 distance = 0;

    /* Initialize all drivers */
    LCD_init();             /* Initialize LCD display */
    Buzzer_init();          /* Initialize Buzzer */
    LEDS_init();            /* Initialize all LEDs */
    Ultrasonic_init();      /* Initialize Ultrasonic sensor */

    /* Enable global interrupts */
    SREG |= (1 << 7);

    /* Display initial message */
    LCD_clearScreen();
    LCD_moveCursur(0, 0);
    LCD_displayString("Distance:    cm");
    LCD_moveCursur(1, 0);
    LCD_displayString("  Parking Aid  ");

    _delay_ms(2000);

    LCD_moveCursur(1, 0);
    LCD_displayString("               ");

    /* Main application loop */
    while(1)
    {
        /* Read distance from ultrasonic sensor */
        distance = Ultrasonic_readDistance();

        /* Control LEDs and buzzer based on distance */
        ControlIndicators(distance);

        /* Display distance on LCD */
        DisplayDistance(distance);

        /* Small delay for system stability */
        _delay_ms(50);
    }

    return 0;
}

/******************************************************************************
 *
 * Module: Ultrasonic Sensor
 *
 * File Name: Ultrasonic.c
 *
 * Description: Source file for the HC-SR04 Ultrasonic Sensor driver
 *
 * Author: Mahmoud Abouzeid
 *
 *******************************************************************************/

#include "Ultrasonic.h"
#include "../../MCAL/ICU/ICU.h"
#include "../../MCAL/GPIO/GPIO.h"
#include <util/delay.h>

/*******************************************************************************
 *                              Functions Prototypes                           *
 *******************************************************************************/
void System_Init(void);
void UpdateLCDDisplay(uint16 distance);
void ControlIndicators(uint16 distance);
void HandleStopCondition(void);

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

/*
 * Description: Initialize all system components
 */
void System_Init(void)
{
    LCD_init();                 // Initialize the LCD display
    LEDS_init();                // Initialize the LED system
    Buzzer_init();              // Initialize the buzzer
    Ultrasonic_init();          // Initialize the ultrasonic sensor

    SREG |= (1 << 7);           // Enable global interrupts by setting the I-bit in the status register

    // Display the initial message on the LCD
    LCD_displayStringRowColumn(0, 1, "Distance=   CM");
}

/*
 * Description: Update the LCD display with current distance
 * Input: distance - measured distance in cm
 */
void UpdateLCDDisplay(uint16 distance)
{
    // Update the distance on the LCD at row 0, column 10
    LCD_moveCursur(0, 10);

    if (distance < 100) {
        LCD_displayString(" "); // Add space for alignment
    }
    if (distance < 10) {
        LCD_displayString(" "); // Add another space for single digit
    }

    LCD_itos(distance); // Convert integer to string and display it on the LCD

    // Clean up the display if the distance is less than 10 cm to avoid leftover characters
    if (distance < 10) {
        LCD_displayStringRowColumn(0, 11, " "); // Clear any extra digits on the LCD
    }
    else if (distance < 100) {
        LCD_displayStringRowColumn(0, 12, " "); // Clear any extra digits on the LCD
    }
}

/*
 * Description: Control LEDs and buzzer based on distance
 * Input: distance - measured distance in cm
 */
void ControlIndicators(uint16 distance)
{
    // Conditional actions based on distance
    if (distance > 20) {
        // If the distance is greater than 20 cm, turn off all LEDs and the buzzer
        LED_off(RED_LED);
        LED_off(GREEN_LED);
        LED_off(BLUE_LED);
        Buzzer_off();
        LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    }
    else if (distance >= 16 && distance <= 20) {
        // If the distance is between 16 and 20 cm, turn on the red LED only
        LED_on(RED_LED);
        LED_off(GREEN_LED);
        LED_off(BLUE_LED);
        Buzzer_off();
        LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    }
    else if (distance >= 11 && distance <= 15) {
        // If the distance is between 11 and 15 cm, turn on the red and green LEDs
        LED_on(RED_LED);
        LED_on(GREEN_LED);
        LED_off(BLUE_LED);
        Buzzer_off();
        LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    }
    else if (distance >= 6 && distance <= 10) {
        // If the distance is between 6 and 10 cm, turn on red, green, and blue LEDs
        LED_on(RED_LED);
        LED_on(GREEN_LED);
        LED_on(BLUE_LED);
        Buzzer_off();
        LCD_displayStringRowColumn(1, 7, "    "); // Clear any previous messages on the LCD
    }
    else {
        // If the distance is less than or equal to 5 cm, handle stop condition
        HandleStopCondition();
    }
}

/*
 * Description: Handle the stop condition (distance <= 5 cm)
 * Display "STOP" and activate buzzer with blinking LEDs
 */
void HandleStopCondition(void)
{
    // Display "STOP" on the LCD
    LCD_displayStringRowColumn(1, 7, "STOP");

    // Turn on all LEDs and buzzer
    LED_on(RED_LED);
    LED_on(GREEN_LED);
    LED_on(BLUE_LED);
    Buzzer_on();

    _delay_ms(100);          // Wait for 100 ms

    // Turn off all LEDs and buzzer
    LED_off(RED_LED);
    LED_off(GREEN_LED);
    LED_off(BLUE_LED);
    Buzzer_off();

    _delay_ms(100);          // Wait for another 100 ms to create a blinking effect
}

/*******************************************************************************
 *                              Main Function                                  *
 *******************************************************************************/
int main(void)
{
    uint16 Distance = 0; // Variable to store the distance measured by the ultrasonic sensor

    // Initialize all system components
    System_Init();

    while (1)
    {
        // Read the distance from the ultrasonic sensor
        Distance = Ultrasonic_readDistance();

        // Add 1 for rounding adjustment (as in original code)
        Distance = Distance + 1;

        // Update LCD display with current distance
        UpdateLCDDisplay(Distance);

        // Control LEDs and buzzer based on distance
        ControlIndicators(Distance);
    }

    return 0;
}
